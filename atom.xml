<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Da2k Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.da2k.com.br/"/>
  <updated>2015-03-25T10:05:16.297Z</updated>
  <id>http://blog.da2k.com.br/</id>
  
  <author>
    <name><![CDATA[Fernando Daciuk]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Javascript - Criando um módulo Ajax com Promises - Parte 5]]></title>
    <link href="http://blog.da2k.com.br/2015/03/22/javascript-criando-um-modulo-ajax-com-promises-parte-5/"/>
    <id>http://blog.da2k.com.br/2015/03/22/javascript-criando-um-modulo-ajax-com-promises-parte-5/</id>
    <published>2015-03-22T03:00:00.000Z</published>
    <updated>2015-03-25T01:52:34.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/ajax-module-with-promises5.png" alt=""></p>
<p>Seguindo com <a href="http://blog.da2k.com.br/2015/03/05/javascript-entendendo-e-criando-suas-proprias-promises/" target="_blank" rel="external">nossa série</a>, vamos agora fazer funcionar o método <strong>POST</strong> do nosso módulo <strong>Ajax</strong>!</p>
<a id="more"></a>

<h2 id="Testando_o_método_POST">Testando o método POST</h2>
<p>No último artigo, criamos um <code>describe()</code> para testar o método <code>get()</code>. Faremos o mesmo agora para o método <code>post()</code>. No arquivo <code>tests/test.ajax.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">describe( <span class="string">'Test `post` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  it( <span class="string">'Should return an object'</span>, <span class="function"><span class="keyword">function</span><span class="params">( done )</span> </span>{</div><div class="line">    <span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax();</div><div class="line">    ajax.post( <span class="string">'http://localhost:3000/api/user/joao'</span> ).done(<span class="function"><span class="keyword">function</span><span class="params">( response )</span> </span>{</div><div class="line">      response.should.be.an( <span class="string">'object'</span> );</div><div class="line">      done();</div><div class="line">    });</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>O método <code>post()</code> na nossa API de testes retorna um objeto com os dados do usuário passado. Estamos chamando os dados do usuário <code>joao</code>, então, nosso primeiro teste, é verificar se a requisição nos retorna um objeto.</p>
<p>Obviamente, o teste não passa, pois ainda não implementamos a funcionalidade para o método <code>post()</code> no nosso módulo. Sem mais delongas, vamos fazer isso agora mesmo. No arquivo <code>src/ajax.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$public.post = <span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">( url )</span> </span>{</div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  xhr.open( <span class="string">'POST'</span>, url || <span class="string">''</span>, <span class="literal">true</span> );</div><div class="line">  xhr.addEventListener( <span class="string">'readystatechange'</span>, $private.handleReadyStateChange, <span class="literal">false</span> );</div><div class="line">  xhr.send();</div><div class="line">  <span class="keyword">return</span> $private.promises();</div><div class="line">};</div></pre></td></tr></table></figure>

<p>O método post na nossa API recebe via URL o parâmetro <code>slug</code>, onde iremos fazer algo com os dados desse usuário. No exemplo, nós simplesmente retornamos os dados, mas em uma API real, provavelmente iremos alterar esses dados, ou tratar de alguma forma. </p>
<p>Por ser simples, a implementação no nosso módulo é basicamente a mesma do método <code>get()</code>, com a diferença do método <code>open()</code>, onde passamos o atributo <code>POST</code>, ao invés de <code>GET</code>.</p>
<p>Agora nosso teste passa! Estamos com todos os testes verdes, mas temos código repetido. Já sabe o que temos que fazer né? Isso mesmo: <strong style="color: blue">REFACTORY!</strong></p>
<p>Esse é o momento em que deixamos nosso código um pouco melhor, mais legível, muitas vezes removendo código - pois menos é mais :D - mas sempre mantendo os testes passando. Não podemos implementar nada novo nesse momento, apenas melhorar o que já temos :)</p>
<p>Vamos então fazer o <em>refactory</em>. Criaremos um novo método para envolver o código repetido, e passaremos por parâmetro somente o tipo e a URL. No arquivo <code>src/ajax.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$private.XHRConnection = <span class="function"><span class="keyword">function</span> <span class="title">XHRConnection</span><span class="params">( type, url )</span> </span>{</div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  xhr.open( type, url || <span class="string">''</span>, <span class="literal">true</span> );</div><div class="line">  xhr.addEventListener( <span class="string">'readystatechange'</span>, $private.handleReadyStateChange, <span class="literal">false</span> );</div><div class="line">  xhr.send();</div><div class="line">  <span class="keyword">return</span> $private.promises();</div><div class="line">};</div></pre></td></tr></table></figure>

<p>E os nossos métodos <code>get()</code> e <code>post()</code> agora ficarão assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$public.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">( url )</span> </span>{</div><div class="line">  <span class="keyword">return</span> $private.XHRConnection( <span class="string">'GET'</span>, url );</div><div class="line">};</div><div class="line">  </div><div class="line">$public.post = <span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">( url )</span> </span>{</div><div class="line">  <span class="keyword">return</span> $private.XHRConnection( <span class="string">'POST'</span>, url );</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Se executarmos nossos testes, veremos que tudo continua passando lindamente! <em>Refactory</em> executado com sucesso \o/</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Como disse acima, na maioria dos casos, os métodos <code>post</code>, <code>put</code> e <code>delete</code> podem receber os parâmetros implicitamente, ao invés de enviar via URL. Vamos então preparar nossa API para receber um <strong>POST</strong> através da URL <code>http://localhost:3000/user</code>, e passar o parâmetro implicitamente. </p>
<p>Primeiro vamos precisar instalar o <code>body-parser</code>, que vai parsear os dados que recebermos via <strong>POST</strong> em <code>req.body</code>. Instale com o comando abaixo no seu terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev body-parser</div></pre></td></tr></table></figure>

<p>Agora, vamos adicionar o <code>body-parser</code> à nossa API. No início do nosso arquivo <code>api/app.js</code>, vamos adicionar o <code>body-parser</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>( <span class="string">'body-parser'</span> );</div></pre></td></tr></table></figure>

<p>Agora, antes da chamada onde setamos o header <code>res.setHeader( &#39;Access-Control-Allow-Origin&#39;, &#39;*&#39; );</code>, vamos dizer ao <code>connect</code> que ele deve usar o <em>middleware</em> do <code>bodyParser</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.use( bodyParser.urlencoded({ extended: <span class="literal">false</span> }) );</div><div class="line">app.use( bodyParser.json() );</div></pre></td></tr></table></figure>

<p>Vamos também fazer uma pequena alteração na função <code>postResponse()</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">postRequest</span><span class="params">( req, res, next )</span> </span>{</div><div class="line">  <span class="keyword">var</span> user = req.params.slug || req.body.slug;</div><div class="line">  res.setHeader( <span class="string">'Content-Type'</span>, <span class="string">'application/json'</span> );</div><div class="line">  res.end( <span class="built_in">JSON</span>.stringify( users[ user ] ) );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Essa alteração é para que possamos obter dados vindo tanto da URL, com <code>req.params.slug</code>, como os dados enviados no corpo da requisição, com <code>req.body.slug</code>. Como vamos sempre usar um ou outro, podemos tratar dessa forma, com <code>||</code>.</p>
<p>E por fim, vamos criar mais um <em>endpoint</em> para nossa nova requisição à <code>http://localhost:3000/user</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">router.post( <span class="string">'/api/user'</span>, postRequest );</div><div class="line">router.post( <span class="string">'/api/user/:slug'</span>, postRequest );</div></pre></td></tr></table></figure>



<p>A linha <code>2</code>, já existe na nossa API, somente adicionamos a linha <code>1</code>. Vamos testar nossa API com o <strong>Postman</strong>, e verificar se o request retorna a requisição que desejamos:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/03/request-post-data-implicit.png" alt=""></p>
<p>Pronto! Tudo funciona corretamente! Só precisamos enviar o <em>header</em> <code>x-www-form-urlencoded</code> na nossa requisição :D</p>
<p>Se ficou em dúvida de como o arquivo deve ficar, consulte o <a href="https://github.com/fdaciuk/ajax" target="_blank" rel="external">repositório onde estamos desenvolvendo nosso módulo</a>.</p>
<p>Mas para não ficarmos só no teste manual, vamos adicionar mais um teste no nosso arquivo <code>tests/test.ajax.js</code>, para essa URL:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">it( <span class="string">'Should return data about `joao`'</span>, <span class="function"><span class="keyword">function</span><span class="params">( done )</span> </span>{</div><div class="line">  <span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax();</div><div class="line">  ajax.post( <span class="string">'http://localhost:3000/api/user'</span>, <span class="string">'slug=joao'</span> ).done(<span class="function"><span class="keyword">function</span><span class="params">( response )</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( response );</div><div class="line">    response.name.should.be.equal( <span class="string">'João da Silva'</span> );</div><div class="line">    done();</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>A novidade aqui é que passamos mais um parâmetro no método <code>post()</code>: os dados que serão enviados ao servidor, em formato de <em>query string</em>. Passamos o parâmetro <code>slug</code>, que é o que nossa API espera, com o <em>slug</em> do usuário que queremos os dados de volta. Para passar mais dados, você pode usar o formato: <code>dado1=valor1&amp;dado2=valor2&amp;dado3=valor3</code>.</p>
<p>Vamos agora implementar essa funcionalidade em <code>src/ajax.js</code>. Primeiro, passamos o parâmetro para o método <code>post()</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$public.post = <span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">( url, data )</span> </span>{</div><div class="line">  <span class="keyword">return</span> $private.XHRConnection( <span class="string">'POST'</span>, url, data );</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Agora vamos alterar o método da conexão, para receber os dados e enviar ao servidor, com o <em>header</em> correto:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$private.XHRConnection = <span class="function"><span class="keyword">function</span> <span class="title">XHRConnection</span><span class="params">( type, url, data )</span> </span>{</div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  xhr.open( type, url || <span class="string">''</span>, <span class="literal">true</span> );</div><div class="line">  xhr.setRequestHeader( <span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span> );</div><div class="line">  xhr.addEventListener( <span class="string">'readystatechange'</span>, $private.handleReadyStateChange, <span class="literal">false</span> );</div><div class="line">  xhr.send( data );</div><div class="line">  <span class="keyword">return</span> $private.promises();</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Passamos o parâmetro <code>data</code> no método, que será passado para <code>xhr.send()</code>, e adicionamos o <em>header</em> <code>application/x-www-form-urlencoded</code>.</p>
<p>Agora nosso método faz requisições <strong>GET</strong> e <strong>POST</strong>, e todos os testes estão passando! o/</p>
<p>Os métodos <code>put()</code> e <code>delete()</code> são praticamente o <code>post()</code>, somente mudando para o verbo correto - <code>PUT</code> e <code>DELETE</code>. </p>
<p>Podemos ainda melhorar o tipo de envio de dados: ao invés de passar uma <em>query string</em>, poderíamos passar um objeto e, no módulo, tratar esses dados, convertendo para <em>query string</em> antes de fazer o envio.</p>
<p>Como você pode ver, tem muitas coisas que podemos fazer para melhorar: o envio dos dados, <em>headers</em> dinâmicos, credenciais para validação no servidor (usuário e senha), até que todos os métodos do objeto <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="external">XMLHttpRequest</a> estejam cobertos. A série acaba por aqui, mas vou fazendo essas implementaçôes aos poucos! Se quiser acompanhar, dê um <strong>watch</strong> no repositório: <a href="https://github.com/fdaciuk/ajax" target="_blank" rel="external">https://github.com/fdaciuk/ajax</a></p>
<p>Dúvidas? Comente!</p>
<p>Até o próximo o/</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/ajax-module-with-promises5.png" alt=""></p>
<p>Seguindo com <a href="http://blog.da2k.com.br/2015/03/05/javascript-entendendo-e-criando-suas-proprias-promises/" target="_blank" rel="external">nossa série</a>, vamos agora fazer funcionar o método <strong>POST</strong> do nosso módulo <strong>Ajax</strong>!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="promises" scheme="http://blog.da2k.com.br/tags/promises/"/>
    
      <category term="ajax" scheme="http://blog.da2k.com.br/tags/ajax/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Criando uma ferramenta de CLI com NodeJS]]></title>
    <link href="http://blog.da2k.com.br/2015/03/20/criando-uma-ferramenta-de-cli-com-nodejs/"/>
    <id>http://blog.da2k.com.br/2015/03/20/criando-uma-ferramenta-de-cli-com-nodejs/</id>
    <published>2015-03-20T03:00:00.000Z</published>
    <updated>2015-03-21T01:24:41.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/nodejs-cli.png" alt=""></p>
<p>Ferramentas de linha de comando ajudam quando você precisa executar tarefas mais rapidamente. Que tal aprender a criar vocẽ mesmo a sua? E em <strong>NodeJS</strong>! E ainda disponibilizar no <strong>NPMJS</strong>! Ficou curioso? Vem que eu te mostro como faz ;)</p>
<a id="more"></a>

<h2 id="O_que_é_uma_CLI?">O que é uma CLI?</h2>
<p><strong>CLI</strong> significa <em>Command Line Interface</em>, ou seja, é uma ferramenta que disponibiliza uma interface de linha de comando para que você possa executar alguns comandos específicos no terminal. Normalmente essas ferramentas são criadas utilizando <em>shell script</em>, mas nós vamos criar a nossa com Javascript :D</p>
<p><em>Antes de começar, que tal mostrar alguns exemplos de <strong>CLI</strong></em>?</p>
<p><a href="http://gulpjs.com/" target="_blank" rel="external"><strong>Gulp</strong></a>, <a href="http://gruntjs.com/" target="_blank" rel="external"><strong>Grunt</strong></a>, <a href="http://expressjs.com/" target="_blank" rel="external"><strong>Express</strong></a>, <a href="http://mochajs.org/" target="_blank" rel="external"><strong>Mocha</strong></a>, e inclusive o próprio <a href="https://nodejs.org/" target="_blank" rel="external"><strong>NodeJS</strong></a> e <a href="https://www.npmjs.com/" target="_blank" rel="external"><strong>NPM</strong></a> são ótimos exemplos de <strong>CLI</strong>. Essas ferramentas de <strong>CLI</strong> criadas em <strong>NodeJS</strong> normalmente estão disponíveis para baixar no <a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a>, onde vocẽ instala com o comando <code>npm i -g nome-da-ferramenta</code>.</p>
<p>Quando você instala um módulo do <strong>Node</strong> globalmente, usando o <code>-g</code>, é porque essa ferramenta normalmente disponibiliza essa interface de linha de comando, onde você não precisa depender do comando <code>node nome-da-ferramenta</code> para executá-la, e sim poder usar o próprio nome da ferramenta como comando.</p>
<p>Por exemplo: como você faz para executar uma tarefa do <strong>Gulp</strong>? Você executa <code>gulp nome-da-task</code>, sem precisar do comando <code>node</code>! Isso é uma <strong>CLI</strong> :D</p>
<h2 id="Como_faz_então?">Como faz então?</h2>
<p>Vamos criar uma ferramenta bastante simples: uma calculadora que faz a soma entre dois números passados como parâmetro. A primeira coisa é escolher um nome para a ferramenta, - <em>vixxxxxx</em> - pois esse nome precisa estar disponível no NPMJS :)</p>
<p>Acho que essa é a parte mais difícil, haha :D</p>
<p>Não conheço nenhuma ferramenta que verifique se um nome está disponível no NPMJS - inclusive, isso seria uma ideia bem útil de CLI ;) - então vamos verificar manualmente se tem algum nome disponível, chutando mesmo:</p>
<p>Acesse <a href="https://www.npmjs.com/package/" target="_blank" rel="external">https://www.npmjs.com/package/</a>, e coloque um nome após a barra. Se ele estiver disponível, você verá uma página de <code>not found</code> :)</p>
<p>Nossa <strong>CLI</strong> se chamará <code>calculatr</code>, e será usada da seguinte forma: usaremos no terminal o comando para somar dois números:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">calculatr sum <span class="number">2</span> <span class="number">3</span></div></pre></td></tr></table></figure>

<p>Que nos dará o resultado <code>5</code>! Bem inútil, mas vai servir para você ver como funciona uma <strong>CLI</strong> :D</p>
<p><strong>Observação:</strong> existem muitos pacotes no NPMJS, alguns indispensáveis, outros bastante inúteis. Então lembre-se que você sempre terá a opção de <strong>despublicar</strong> um pacote, se você estiver fazendo somente testes para ver como tudo funciona por lá. Assim nós ajudamos ao próximo e a nós mesmos, não deixando no NPMJS coisas desatualizadas e que não sirvam para nada ;)</p>
<p>Agora que sabemos como será a interface do nosso projeto, vamos ver como criar a ferramenta.</p>
<h2 id="Primeiros_passos">Primeiros passos</h2>
<p>O passo inicial é criar um diretório separado para o projeto. A estrutura será bastante simples: só precisaremos de um diretório chamado <code>calculatr/</code> e, dentro dele, um arquivo com qualquer nome. Vamos chamar de <code>calculatr.js</code> :)</p>
<p>Precisaremos também de um <code>package.json</code> com algumas informações para o nosso módulo.</p>
<p>Em artigos anteriores, mostrei que você poderia sempre criar o seu <code>package.json</code> com o comando <code>echo &quot;{}&quot; &gt; package.json</code>, que imprimiria dentro do arquivo somente um “abre e fecha chaves”, que é o mínimo que precisamos quando estamos usando o <strong>Node</strong> com um <em>task runner</em>, por exemplo, onde o <code>package.json</code> será usado somente para gerenciamento de pacotes.</p>
<p>Agora, nós vamos criar nosso próprio módulo <strong>NodeJS</strong>, então o <code>package.json</code> precisa de uma atenção especial :)</p>
<h2 id="Criando_o_package-json">Criando o <code>package.json</code></h2>
<p>Para criar o <code>package.json</code>, você pode usar o comando <code>npm init</code>, e então responder algumas perguntas para criar seu módulo. A primeira pergunta é sobre o nome do módulo. Por <em>default</em>, NPM vai te sugerir o nome do diretório atual, que normalmente é o nome do projeto. Vamos manter (se estive como <code>calculatr</code>).</p>
<p>A próxima pergunta é sobre a versão. Estamos começando agora, então vamos deixar com a versão <code>0.0.1</code>. Daqui a pouco vou explicar melhor sobre como funcionam as versões ;)</p>
<p>Por enquanto, digite <code>0.0.1</code> e dê enter.</p>
<p>Agora é pedido uma descrição sobre o projeto. Essa descrição aparecerá no site do NPMJS, então capriche ;)<br>Vamos deixar algo como:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CLI Calculator</div></pre></td></tr></table></figure>

<p>Depois, ele pede o <code>entrypoint</code>. Esse parâmetro referencia o arquivo principal, ou o ponto de entrada da nossa aplicação. No nosso caso, esse arquivo é o <code>calculatr.js</code>.</p>
<p>O próximo é <code>test command</code>. Esse será o comando que você irá utilizar para testar seu código. Vamos utilizar o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">istanbul cover _mocha -- -R spec</div></pre></td></tr></table></figure>

<p>Utilizaremos o <a href="http://blog.da2k.com.br/2015/01/07/code-coverage-em-javascript/" target="_blank" rel="external"><code>istanbul</code> para coverage</a> e o <a href="http://blog.da2k.com.br/2015/01/06/pensando-tdd-com-javascript/" target="_blank" rel="external"><code>mocha</code> para os testes</a>. Lembre-se de ter esses dois pacotes instalados globalmente. Se não tiver, execute no seu terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g istanbul mocha</div></pre></td></tr></table></figure>

<p>A próxima pergunta é sobre o repositório no Github. Se você ainda não criou o repositório para esse projeto, faça-o e entre com a URL. Se quiser fazer depois, não há problemas. Quando você configurar o <code>git</code> para esse projeto e rodar <code>npm init</code> novamente, o seu <code>package.json</code> será atualizado com essas informações :) </p>
<p>A licença, você pode escolher uma que esteja de acordo com o formato que vocẽ irá disponibilizar sua ferramenta. Normalmente usa-se <code>MIT</code>, ou <code>GPLv2</code>, <code>v3</code>. Se tiver dúvidas quanto à licença, pode escolher uma [por aqui] (<a href="http://choosealicense.com/" target="_blank" rel="external">http://choosealicense.com/</a>).</p>
<p>Se tudo der certo, vocẽ terá um <code>package.json</code> preenchido!</p>
<p>Mas, como estamos criando uma <strong>ferramenta de CLI</strong>, precisamos adicionar mais algumas entradas. Edite seu <code>package.json</code>, e adicione:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"preferGlobal": true,</div><div class="line">"bin": {</div><div class="line">  "calculatr": "calculatr.js"</div><div class="line">}</div></pre></td></tr></table></figure>

<p>No site do NPMJS, é mostrado o comando de instalação do módulo. O <code>preferGlobal</code> diz ao NPM que esse módulo deve ser instalado globalmente. Logo, no site do NPMJS irá aparecer o seguinte comando para instalação do móulo:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g calculatr</div></pre></td></tr></table></figure>

<p>E o parâmetro <code>bin</code>, é para que possamos dizer ao NPM que, quando executarmos <code>calculatr</code> no terminal, o arquivo que será chamado é o <code>calculatr.js</code>.</p>
<p>Adicione também mais uma entrada em <code>scripts</code>, no seu <code>package.json</code>. Ele deve ficar assim:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": {</div><div class="line">  "test": "istanbul cover _mocha -- -R spec",</div><div class="line">  "watch": "istanbul cover _mocha -- -R spec --watch"</div><div class="line">},</div></pre></td></tr></table></figure>

<p>Para que possamos executar nossos testes sem precisar nos preocupar em ficar executando o comando <code>npm test</code> toda hora. Só precisaremos executar <code>npm run watch</code> e <em>voilà</em>!</p>
<p>E agora nosso <code>package.json</code> está pronto!</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Sobre_Versões">Sobre Versões</h2>
<p>As versões para os módulos funcionam mais ou menos assim: o terceiro número se refere somente a ajustes, solução de bugs, mas sem adicionar novas funcionalidades. Quando temos um módulo com versão <code>0.0.x</code>, onde <code>x</code> você incrementa a cada alteração que vocẽ fizer no módulo, chamamos de versão <code>alpha</code>. O segundo número, é quando vocẽ tem uma versão de algo já funcional. Então, a versão <code>0.1.0</code> tem a primeira versão <code>beta</code>, ou seja, ainda em testes, mas com alguma funcionalidade pronta. O incremento do segundo número deve ser a cada nova funcionalidade. O terceiro número continua sendo para resolver bugs, ou pequenos problemas. Então, se vocẽ tiver uma versão <code>0.1.3</code>, significa que, na versão beta, que tem <code>1</code> funcionalidade que funciona (?), você já fez <code>3</code> correções de bugs, ou ajustes.</p>
<p>E o último número, é quando você tem uma versão estável do módulo, com o mínimo de funcionalidades que você considera ideal para que ele seja um módulo “completo”. Esse completo é muito relativo, mas, dando o exemplo do nosso módulo, quando ele estiver somando dois números, ele já estará estável, e poderemos usar a versão <code>1.0.0</code>. </p>
<p>Nem todos os módulos seguem essa ideia. Alguns tem sua própria forma de gerenciar suas versões, mas a base é mais ou menos essa.</p>
<h2 id="Criando_o_módulo">Criando o módulo</h2>
<p>Agora, vamos começar a criar nosso módulo! </p>
<p>Como boa prática, vamos primeiro aos testes :D</p>
<p>Crie um diretório <code>test</code>, e, dentro dele, um arquivo chamado <code>test.calculatr.js</code>. Antes de começar, vamos instalar as dependências que usaremos. Já temos o <code>istanbul</code>e o <code>mocha</code>, como citado anteriormente. Se não os tiver instalados globalmente ainda, instale.</p>
<p>Após isso, vamos às dependências para os testes:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev should</div></pre></td></tr></table></figure>

<p>Instalamos com <a href="http://blog.da2k.com.br/2015/03/03/gerenciando-corretamente-dependencias-em-nodejs-save-ou-save-dev-1/" target="_blank" rel="external">—save-dev</a>, pois queremos o <code>should</code> somente para desenvolvimento, ele não fará parte da aplicação.</p>
<p>E então vamos escrever nosso primeiro teste. No arquivo <code>test/test.calculatr.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span>;</div><div class="line">  </div><div class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>( <span class="string">'child_process'</span> ).exec;</div><div class="line"><span class="keyword">var</span> pkg = <span class="built_in">require</span>( <span class="string">'../package.json'</span> );</div><div class="line"><span class="keyword">var</span> calculatr = <span class="string">'./calculatr.js'</span>;</div><div class="line"><span class="built_in">require</span>( <span class="string">'should'</span> );</div><div class="line">  </div><div class="line">describe( <span class="string">'Calculatr'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  it( <span class="string">'Should return version of calculatr'</span>, <span class="function"><span class="keyword">function</span><span class="params">( done )</span> </span>{</div><div class="line">    exec( calculatr + <span class="string">' --version'</span>, <span class="function"><span class="keyword">function</span><span class="params">( err, stdout, stderr )</span> </span>{</div><div class="line">      <span class="keyword">if</span>( err ) <span class="keyword">throw</span> err;</div><div class="line">      stdout.replace( <span class="string">'\n'</span>, <span class="string">''</span> ).should.be.equal( pkg.version );</div><div class="line">      done();</div><div class="line">    });</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p><em>Opa! Tem bastante coisa nova ae!</em></p>
<p>Sim, vou explicar tudo :D</p>
<p>O <code>require( &#39;child_process&#39; ).exec</code> faz parte do <strong>NodeJS</strong>. Ele vai nos ajudar a executar comandos no terminal, permitindo-nos usar uma função de callback para fazer nosso teste quando o comando for executado :)</p>
<p>Na linha <code>4</code>, adicionamos o nosso <code>package.json</code>, e já veremos o porquê!</p>
<p>Na linha <code>5</code>, vamos simular o comando para executar o <code>calculatr</code>, pois ainda não temos o módulo instalado globalmente. Mas quando ele for instalado, usando <code>calculatr</code> irá chamar o arquivo <code>calculatr.js</code> :)</p>
<p>Adicionamos o <code>should</code> para fazer os testes.</p>
<p>No primeiro teste, vamos verificar se nossa CLI retorna a versão correta. Se usarmos o comando <code>calculatr --version</code>, deveria retornar a versão. Na linha <code>10</code> você pode ver o teste sendo feito, usando o <code>exec</code> para dar o comando.</p>
<p>O que ele faz é bem simples: como primeiro parâmetro da função, passamos o comando <code>calculatr + &#39; --version&#39;</code>. A função de callback nos retorna, como primeiro parâmetro, um erro (se houver), depois a saída no terminal (<code>stdout</code>), ou algum erro para a saída (<code>stderr</code>).</p>
<p>O que iremos usar para testar é a saída (<code>stdout</code>). Fazemos o teste com o comando da linha <code>12</code>. Testamos se a saída - que retorna sempre uma quebra de linha no final, por isso o <code>replace</code> - é igual à versão do nosso projeto. Pegamos a versão diretamente do <code>package.json</code>, pois ela será atualizada constantemente. Se colocarmos manualmente, teremos que lembrar de alterar a cada versão lançada, para não quebrar nosso teste.</p>
<p>Usamos a função <code>done()</code>, que já vimos no artigo sobre <a href="http://blog.da2k.com.br/2015/03/05/javascript-entendendo-e-criando-suas-proprias-promises/" target="_blank" rel="external">como criar um módulo Ajax com Promises</a>, que serve para dizer à função <code>it()</code>, que é o nosso teste, que nossa asserção já foi feita, e ele pode verificar se passou ou não.</p>
<p>Obviamente, nosso teste quebra, pois ainda não temos nada no arquivo principal :)</p>
<p>Ainda antes de criar nosso módulo, você percebeu que no nosso teste não executamos o comando <code>node ./calculatr.js --version</code>, e sim <code>./calculatr.js --version</code>, sem o <code>node</code>?</p>
<p>Como essa é uma ferramenta de <strong>CLI</strong>, ela precisa ser executada sem o comando <code>node</code>, mas para isso, ela precisa de permissão de execução. Para dar essa permissão, execute no seu terminal, na raiz do projeto:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x calculatr.js</div></pre></td></tr></table></figure>

<p>Isso fará com que seja possível executar esse arquivo diretamente com o comando <code>./calculatr</code>! Mas ainda tem outro segredo que só vou contar quando escrevermos nosso módulo :P</p>
<p>Vamos fazê-lo agora! No arquivo <code>calculatr.js</code>, adicione:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env node</span></div><div class="line"><span class="string">'use strict'</span>;</div><div class="line">  </div><div class="line">var program = require( <span class="string">'commander'</span> );</div><div class="line">var pkg = require( <span class="string">'./package.json'</span> );</div><div class="line">  </div><div class="line">program.version( pkg.version );</div><div class="line">program.parse( process.argv );</div></pre></td></tr></table></figure>

<p>A primeira linha é essencial para nossa <strong>CLI</strong>, pois é ela que faz a mágica para que nosso módulo funcione sem precisar escrever em <em>shell script</em>: dizemos que, ao chamar esse arquivo - executando <code>./calculatr</code> no terminal - , o programa que irá executá-lo será o <code>node</code>!</p>
<p>Então, por baixo dos panos, ao executarmos <code>./calculatr</code>, na verdade, o comando executado será <code>node ./calculatr</code> ;)</p>
<p><em>Safadeeeenho! Mas pera, tem um módulo novo ali! O que é esse <strong>commander</strong>?</em></p>
<p>O <code>commander</code> nos ajuda a montar uma interface para usarmos na linha de comando. Você deve instalá-lo com o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save commander</div></pre></td></tr></table></figure>

<p>Agora usamos o <code>--save</code>, pois esse módulo será uma dependência do nosso projeto. Toda vez que o baixarmos, também será baixado o <code>commander</code> :)</p>
<p>Na linha <code>7</code>, passamos para o <code>commander</code> a versão do nosso projeto. Pegamos direto do <code>package.json</code>, como fizemos no arquivo de teste. E na linha <code>8</code>, fazemos o parse com os argumentos que forem passados no terminal. O <code>process.argv</code> recebe uma coleção com os argumentos passados. Ao fazer o parse, podemos executar o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./calculatr.js --version</div></pre></td></tr></table></figure>

<p>Que retornará a versão da nossa ferramenta.</p>
<p>Agora, salvando o arquivo e olhando para o nosso teste, ele passou!! \o/</p>
<h2 id="Primeiro_método:_soma_(sum)">Primeiro método: soma (<code>sum</code>)</h2>
<p>Vamos fazer o primeiro método da nossa calculadora: a soma. Vamos receber, inicialmente, dois valores e somá-los.</p>
<p>E vamos usar o comando abaixo para efetuar a soma:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">calculatr sum <span class="number">1</span> <span class="number">2</span></div></pre></td></tr></table></figure>

<p>Que deverá imprimir o resultado <code>3</code>. Vamos fazer o teste? No arquivo <code>test/test.calculatr.js</code>, adicine mais um teste:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">it( <span class="string">'Command "calculatr sum 1 2" Should return 3'</span>, <span class="function"><span class="keyword">function</span><span class="params">( done )</span> </span>{</div><div class="line">  exec( calculatr + <span class="string">' sum 1 2'</span>, <span class="function"><span class="keyword">function</span><span class="params">( err, stdout, stderr )</span> </span>{</div><div class="line">    <span class="keyword">if</span>( err ) <span class="keyword">throw</span> err;</div><div class="line">    <span class="built_in">Number</span>( stdout ).should.be.equal( <span class="number">3</span> );</div><div class="line">    done();</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>O formato desse teste é bem parecido com o anterior. Só mudaremos o comando, que agora é <code>calculatr + &#39; sum 1 2 &#39;</code>, que deveria retornar <code>3</code>. O retorno da CLI é sempre uma string, então precisamos converter para número antes de fazer o teste, por isso usamos o objeto <code>Number</code> aqui, e então verificamos se o resultado é <code>3</code>.</p>
<p>E adivinha: o teste NÃO PASSA! A-ha! ¬¬</p>
<p>Agora vamos fazer a implementação do código. Vamos modificar um pouco o arquivo <code>calculatr.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">program.version( pkg.version );</div><div class="line">  </div><div class="line">program</div><div class="line">  .command( <span class="string">'sum &lt;number1&gt; &lt;number2&gt;'</span> )</div><div class="line">    .description( <span class="string">'Sum two numbers'</span> )</div><div class="line">    .action(<span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( <span class="built_in">Number</span>( number1 ) + <span class="built_in">Number</span>( number2 ) );</div><div class="line">    });</div><div class="line">  </div><div class="line">program.parse( process.argv );</div></pre></td></tr></table></figure>

<p>Temos três métodos novos do <code>commander</code>: <code>command</code>, <code>description</code> e <code>action</code>. Nós poderíamos ter encadeado todos os métodos, ficando algo como:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">program</div><div class="line">  .version( pkg.version );</div><div class="line">  .command( <span class="string">'sum &lt;number1&gt; &lt;number2&gt;'</span> )</div><div class="line">  .description( <span class="string">'Sum two numbers'</span> )</div><div class="line">  .action(<span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( <span class="built_in">Number</span>( number1 ) + <span class="built_in">Number</span>( number2 ) );</div><div class="line">  })</div><div class="line">  .parse( process.argv );</div></pre></td></tr></table></figure>

<p>Se você achar que assim fica mais legível, fique à vontade :)</p>
<p>Separei pois acho que fica melhor deixar os comandos separados, já que poderemos adicionar mais funcionalidades à nossa ferramenta xD</p>
<p>O <code>command</code> recebe como parâmetro uma string, com o comando, e os argumentos que ele suporta. Quando você usa o parâmetro envolto por <code>&lt;</code> e <code>&gt;</code>, quer dizer que o parâmetro é obrigatório. Para parâmetros opcionais, use <code>[</code> e <code>]</code>.</p>
<p>Depois, o <code>description</code> é uma descrição sobre o comando. Essa descrição é útil quando vocẽ executa no terminal <code>calculatr --help</code>, onde será mostrado o <code>help</code> da sua ferramenta. O <code>commander</code> já deixa toda a interface de retorno do <code>help</code> bonitinha, no padrão da maioria dos <strong>CLIs</strong> em sistemas *nix :D</p>
<p>E a <code>action</code> é a ação para quando o comando for executado no terminal. Essa ação fica em uma função de callback, que recebe como parâmetro os argumentos passados no terminal. O primeiro é o primeiro número, o segundo, o próximo número.</p>
<p>No retorno, executamos um <code>console.log()</code>, para mostrar na saída do terminal, convertendo os dois parâmetros para número com <code>Number()</code> e retornando a soma dos mesmos.</p>
<p>E nosso teste passou \o/</p>
<p>O <code>commander</code> tem vários outros métodos legais. Para saber mais sobre ele, o TJ escreveu um post bem completo, que você pode ler <a href="http://tjholowaychuk.tumblr.com/post/9103188408/commander-js-nodejs-command-line-interfaces-made" target="_blank" rel="external">aqui</a>.</p>
<p><em>E agora, qual o próximo passo?</em></p>
<p>O próximo passo é subir nossa ferramenta no <a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a>!</p>
<h2 id="Subindo_o_módulo_no_NPMJS">Subindo o módulo no NPMJS</h2>
<p>Para subir o módulo é bastante simples: você só precisa executar o comando:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> publish</div></pre></td></tr></table></figure>

<p>Mas antes de fazer isso, você precisa ter um cadastro no site do NPM, e configurar sua máquina para poder publicar seus módulos. Vamos ver como fazer isso! </p>
<p>O cadastro é simples: entre em <a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a>, e cadastre-se, como em qualquer outro site xD</p>
<p>Você ainda pode se cadastrar via terminal, com o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm adduser</div></pre></td></tr></table></figure>

<p>Será pedido um nome de usuário, uma senha e um e-mail (que ficará público).</p>
<p>Se você já tinha cadastro no site, só precisa então logar no seu ambiente, com o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm login</div></pre></td></tr></table></figure>

<p>Após isso, vocẽ precisa verificar se os seus dados estão corretamente configurados. Use o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config ls</div></pre></td></tr></table></figure>

<p>Isso irá listar os seus dados. Confira se tudo está correto.</p>
<p>Mas temos alguns arquivos que não queremos enviar para o NPMJS, como o diretório <code>test</code>, o <code>node_modules</code>, o diretório <code>coverage</code>, criado pelo <code>istanbul</code>.</p>
<p>Para isso, podemos criar um arquivo <code>.npmignore</code> na raiz do nosso projeto, e adicionar esses diretórios, como faríamos no <code>.gitignore</code>.</p>
<p>Feito isso, só executar o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm publish</div></pre></td></tr></table></figure>

<p>E aguardar! Quando o comando terminar de rodar, acesse o <a href="https://www.npmjs.com/package/nome-do-seu-pacote" target="_blank" rel="external">https://www.npmjs.com/package/nome-do-seu-pacote</a> e veja se o seu <strong>CLI</strong> está lá! Pronto, agora você tem uma ferramenta de <strong>CLI</strong> que funciona e está publicada no NPMJS!</p>
<p>Vamos testar se ela funciona? Instale-a globalmente, com o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">sudo</span>] npm i -g calculatr</div></pre></td></tr></table></figure>

<p>Coloquei o <code>sudo</code>, pois provavelmente vocẽ irá precisar dele. Tente primeiro instalar sem o <code>sudo</code>. Se não der certo, então use ele.</p>
<p>Agora com nosso módulo instalado, vamos executá-lo para testar, com o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">calculatr sum <span class="number">3</span> <span class="number">4</span></div></pre></td></tr></table></figure>

<p>E o resultado é: <code>7</code>!</p>
<p>Agora tudo pronto :D</p>
<p>Para ver o código completo desse projeto, vocẽ pode acessá-lo no <a href="https://github.com/fdaciuk/calculatr" target="_blank" rel="external">Github</a> ou no <a href="https://www.npmjs.com/package/calculatr" target="_blank" rel="external">NPMJS</a>.</p>
<p>Até a próxima! Dúvidas? Comente :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/nodejs-cli.png" alt=""></p>
<p>Ferramentas de linha de comando ajudam quando você precisa executar tarefas mais rapidamente. Que tal aprender a criar vocẽ mesmo a sua? E em <strong>NodeJS</strong>! E ainda disponibilizar no <strong>NPMJS</strong>! Ficou curioso? Vem que eu te mostro como faz ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="nodejs" scheme="http://blog.da2k.com.br/tags/nodejs/"/>
    
      <category term="cli" scheme="http://blog.da2k.com.br/tags/cli/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - Criando um módulo Ajax com Promises - Parte 4]]></title>
    <link href="http://blog.da2k.com.br/2015/03/14/javascript-criando-um-modulo-ajax-com-promises-parte-4/"/>
    <id>http://blog.da2k.com.br/2015/03/14/javascript-criando-um-modulo-ajax-com-promises-parte-4/</id>
    <published>2015-03-14T03:00:00.000Z</published>
    <updated>2015-03-23T00:11:38.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/ajax-module-with-promises4.png" alt=""></p>
<p>Após uma série de 4 posts (<a href="http://blog.da2k.com.br/2015/03/05/javascript-entendendo-e-criando-suas-proprias-promises/" target="_blank" rel="external">aqui</a>, <a href="http://blog.da2k.com.br/2015/03/06/javascript-criando-um-modulo-ajax-com-promises/" target="_blank" rel="external">aqui</a>, <a href="http://blog.da2k.com.br/2015/03/08/javascript-criando-um-modulo-ajax-com-promises-parte-2/" target="_blank" rel="external">aqui</a> e <a href="http://blog.da2k.com.br/2015/03/11/javascript-criando-um-modulo-ajax-com-promises-parte-3/" target="_blank" rel="external">aqui</a>), vamos começar a ver nosso módulo finalmente funcionando! Vem comigo :D</p>
<a id="more"></a>

<p>Vamos testar as funcionalidades do nosso módulo. Começaremos sempre pelo mais simples: o método <code>get</code>.<br>Ao requisitar uma URL da nossa API, via GET, esse método deve retornar um objeto.</p>
<p>Vamos ver então como ficaria o teste. Nosso arquivo de testes tem um bloco <code>describe</code> que está testando a interface do nosso módulo. Vamos criar então outro bloco <code>describe</code>, para testar a resposta de cada método, referente aos verbos HTTP, separadamente. Adicione ao arquivo <code>tests/test.ajax.js</code>, logo após o primeiro bloco <code>describe</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">describe( <span class="string">'Test `get` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  it( <span class="string">'Should return an object'</span>, <span class="function"><span class="keyword">function</span><span class="params">( done )</span> </span>{</div><div class="line">    <span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax();</div><div class="line">    ajax.get( <span class="string">'http://localhost:3000/api/users'</span> ).done(<span class="function"><span class="keyword">function</span><span class="params">( response )</span> </span>{</div><div class="line">      response.should.be.an( <span class="string">'object'</span> );</div><div class="line">      done();</div><div class="line">    });</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Temos várias coisas acontecendo aqui, vamos por partes:</p>
<p>Primeiro criamos nosso novo bloco de testes, na linha <code>1</code>, onde testaremos o método <code>get</code> do nosso módulo. Criamos o primeiro teste, na linha <code>2</code>, onde este deveria retornar, como resposta da requisição bem sucedida, um objeto.</p>
<p>Para testar se realmente funciona, precisamos fazer a asserção com a resposta da requisição. Então instanciamos o nosso módulo <code>Ajax</code>, na linha <code>3</code>, e logo após, na linha <code>4</code>, fazemos a requisição para uma URL utilizando o método <code>get</code>. Sabemos que esse método retorna outros dois métodos <code>done</code> e <code>error</code> - usados como <strong>Promises</strong> - que já testamos acima, garantindo que esses métodos existem.</p>
<p>Então passamos para o método <code>done</code> uma função de callback, que será chamada assim que nossa requisição retornar com sucesso. Essa função de callback recebe um parâmetro <code>response</code>, com os dados da nossa requisição.</p>
<p>Enfim, na linha <code>5</code>, fazemos a asserção, para verificar se o retorno é realmente um objeto. Se você não entendeu como esses métodos encadeados funcionam, formando uma frase, sugiro consultar a <a href="http://chaijs.com/api/bdd/" target="_blank" rel="external">documentação do <strong>Chai</strong></a>.</p>
<p><em>Mas o que é essa função <code>done()</code>, sendo invocada na linha <code>6</code>?</em></p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Quando precisamos testar métodos assíncronos, ou seja, quando não sabemos exatamente o momento da resposta, pois dependemos do retorno de um <em>callback</em>, o <strong>Mocha</strong> nos dá uma função que passamos como parâmetro na função <code>it()</code>, que pode ser invocada logo após nossa asserção, para dizer ao <strong>Mocha</strong> quando ele deve realmente verificar se nosso teste passa.</p>
<p>Como as requisições do nosso módulo serão sempre assíncronas (ainda iremos definir isso), precisamos usar a função <code>done()</code> para que o teste não execute antes que resposta da requisição esteja realmente pronta.</p>
<p>Se abrirmos a nossa <code>index.html</code>, que contém os testes, veremos que nosso teste NÃO PASSA. Era o que esperávamos, visto que não implementamos nada ainda!</p>
<p>Mas agora sabemos exatamente o que precisa ser feito: criaremos o processo que faz a requisição e responde ao método <code>done()</code> do nosso módulo :D</p>
<h2 id="Primeiro_problema:_CORS">Primeiro problema: CORS</h2>
<p>Ao acessar a <code>index.html</code>, onde tem os testes, podemos ver no <em>console</em> do nosso navegador que temos um problema com <strong>CORS</strong>. Vamos resolver isso de forma prática, mas que não deve ser feita para toda aplicação: adicionaremos um <em>header</em> na nossa API, que permite que requisições de domínios diferentes consumam essa API. Vamos liberar para todos os domínios, mas fica o alerta: quando você criar uma API Rest, libere somente requisições para domínios específicos, ou então use um <em>acess token</em> para validar as requisições. Mas foi só um alerta, isso é assunto para um post somente sobre APIs Rest.</p>
<p>Voltando ao que interessa: vamos então adicionar o <em>header</em> à nossa API. No arquivo <code>api/app.js</code>, adicione logo após o objeto <code>users</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="function"><span class="keyword">function</span><span class="params">( req, res, next )</span> </span>{</div><div class="line">  res.setHeader( <span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span> );</div><div class="line">  next();</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Isso irá garantir que, antes de toda requisição, o <em>header</em> <code>Access-Control-Allow-Origin</code> seja passado, liberando acesso de qualquer domínio à nossa API :)</p>
<p>Agora vamos ao nosso módulo. Em <code>src/ajax.js</code>, vamos mudar um pouco nosso método <code>get</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$public.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">( url )</span> </span>{</div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  xhr.open( <span class="string">'GET'</span>, url, <span class="literal">true</span> );</div><div class="line">  xhr.addEventListener( <span class="string">'readystatechange'</span>, $private.handleReadyStateChange, <span class="literal">false</span> );</div><div class="line">  xhr.send();</div><div class="line">  <span class="keyword">return</span> $private.promises();</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Quando falamos em <strong>TDD</strong>, e desenvolver usando <em>baby steps</em>, sabemos que devemos escrever o mínimo de código possível para que nosso teste passe, e então ir refatorando até que o código fique aceitável. Nesse caso, escrevemos código até demais, mas tem um bom motivo: não estamos <strong>criando</strong> o <strong>XMLHttpRequest</strong>. Ele já existe, e precisa de uma quantidade mínima de código para funcionar corretamente. E as linhas adicionadas acima é o que precisamos para que uma requisição seja feita corretamente.</p>
<p>Primeiro passamos para o método <code>get</code> o parâmetro <code>url</code>, pois é à partir dele que iremos requisitar os dados do servidor. Na linha <code>2</code>, instanciamos o objeto <code>XMLHttpRequest</code>, que será responsável por fazer a requisição. Na linha <code>3</code>, abrimos uma nova conexão, passando o verbo <code>GET</code> (já que estamos usando o método <code>get()</code> do nosso módulo), depois a URL, e o terceiro parâmetro diz se a requisição será assíncrona ou não. Vamos deixá-lo como <code>true</code>, pois teremos <em>callbacks</em> para nos orientar quando a requisição tiver um retorno.</p>
<p>Na linha <code>4</code>, atrelamos ao nosso objeto um evento chamado <code>readystatechange</code>, onde poderemos tratar todos os passos da requisição. Na linha <code>5</code>, invocamos o método <code>send()</code>, que irá enviar a requisição ao servidor, para que comece a brincadeira! :D</p>
<p>No final, retornamos nesse método as <strong>Promises</strong>, pois queremos utilizar os métodos <code>done()</code> e <code>error()</code>, dependendo da resposta da requisição.</p>
<p>Como você sabe, cada <em>listener</em> de evento recebe como segundo parâmetro uma função de <em>callback</em>, onde será feito o tratamento dos dados quando aquele evento for disparado. Vamos ver como ficará o método <code>$private.handleReadyStateChange()</code>, no nosso módulo <code>src/ajax.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$private.handleReadyStateChange = <span class="function"><span class="keyword">function</span> <span class="title">handleReadyStateChange</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="keyword">this</span>.readyState === <span class="number">4</span> && <span class="keyword">this</span>.status === <span class="number">200</span> && <span class="built_in">JSON</span>.parse( <span class="keyword">this</span>.responseText ) );</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Antes de qualquer coisa, vamos verificar se os dados são retornados corretamente. Para isso, o objeto <code>XMLHttpRequest</code> tem uma propriedade somente leitura chamada <code>readyState</code> que, quando está em <code>4</code>, significa que a requisição está completa. A propriedade <code>status</code> retorna o <em>status HTTP</em> da requisição. 200 significa <em>OK</em>, ou seja, os dados foram retornados corretamente.</p>
<p>Em <code>responseText</code>, recebemos uma <em>DOMString</em>, com o resultado da requisição. Como estamos retornando um JSON do servidor, usamos o método <code>JSON.parse()</code> para <em>parsear</em> a string, transformando-a em um objeto do Javascript.</p>
<p>A resposta que temos é essa:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/03/ajax-request.png" alt=""></p>
<p>Antes de retornar o objeto, podemos ver dois <em>requests</em> acusando <code>404</code>. Analisando o erro, vemos que é por causa do <em>assert</em> que testa a interface do método <code>get</code>, se ele retorna os métodos <code>done</code> e <code>error</code>. O erro acontece porque não estamos passando uma URL para o método, e o <em>XMLHttpRequest</em> tenta requisitar uma URL que não existe. Precisamos ajustar isso. Temos dois caminhos: ou simplesmente passamos uma string vazia na chamada <code>get()</code> do nosso objeto, ou validamos dentro do nosso módulo que, se não for passada nenhuma URL, ele passa uma string vazia, considerando a URL atual.</p>
<p>Vamos alterar nosso módulo, para manter retrocompatibilidade. Imagine que outras pessoas já estão usando esse módulo, então não podemos fazer com que a atualização do mesmo quebre os projetos que usam versões mais antigas. No método <code>get()</code> do nosso módulo, em <code>src/ajax.js</code>, vamos adicionar:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.open( <span class="string">'GET'</span>, url || <span class="string">''</span>, <span class="literal">true</span> );</div></pre></td></tr></table></figure>

<p>Dessa forma, se não for passada URL alguma, consideramos a URL atual, passando uma string vazia, e não precisamos mudar as implementações anteriores :)</p>
<p>Hora de fazer nossas promises funcionarem! Nosso método <code>get()</code> retorna os métodos <code>done()</code> e <code>error()</code>, mas não é no exato momento do retorno desse método que as informações estarão disponíveis, mas sim no retorno do <em>callback</em> do evento <code>readystatechange</code>. Então nós precisaremos de um objeto auxiliar, que será usado para fazer com que as nossas <strong>Promises</strong> conversem com o retorno da requisição.</p>
<p>Parece complicado? Vamos ver na prática como fazer isso! Primeiro, no nosso módulo, criaremos o objeto auxiliar. No início do módulo, em <code>src/ajax.js</code>, logo após as declarações dos objetos <code>$public</code> e <code>$private</code>, adicione:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$private.methods = {</div><div class="line">  done: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{},</div><div class="line">  error: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Esse objeto conterá os métodos que nos auxiliarão a criar nossas <strong>Promises</strong>.</p>
<p>Agora, na função de callback do evento <code>readystatechange</code>, vamos adicionar os métodos <code>done()</code> e <code>error()</code> ao <code>$private.methods</code>, e invocá-los, passando a resposta da requisição para eles. Mudando o método <code>$private.handleReadyStateChange()</code>, vamos agora ter o seguinte:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$private.handleReadyStateChange = <span class="function"><span class="keyword">function</span> <span class="title">handleReadyStateChange</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">var</span> DONE = <span class="number">4</span>;</div><div class="line">  <span class="keyword">if</span>( xhr.readyState === DONE ) {</div><div class="line">    <span class="keyword">if</span>( xhr.status &gt;= <span class="number">200</span> && xhr.status &lt; <span class="number">300</span> ) {</div><div class="line">      <span class="keyword">return</span> $private.methods.done.call( $private.methods, <span class="built_in">JSON</span>.parse( xhr.responseText ) );</div><div class="line">    }</div><div class="line">    $private.methods.error.call( $private.methods, <span class="built_in">JSON</span>.parse( xhr.responseText ) );</div><div class="line">  }</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Só vamos retornar algo quando a requisição estiver completa, por isso fazemos a verificação do <code>xhr.readyState</code> na linha <code>4</code>. Na linha <code>5</code>, verificamos se o status HTTP da requisição está OK, ou seja, se for um status entre <code>200</code> e <code>300</code>, a requisição retornou com sucesso.</p>
<p>Na linha <code>6</code> é onde acontece a primeira parte da magia das <strong>Promises</strong>: usamos o objeto <code>$private.methods</code>, invocando o método <code>done()</code> com o <code>call()</code>, e setamos o próprio objeto para ser o <code>this</code> dentro do método <code>done()</code>. Passamos também como parâmetro o JSON de resposta da requisição, já parseado como objeto Javascript.</p>
<p>Mas tem um porém: esse método <code>$private.methods.done( response )</code>, que recebe esse parâmetro <code>response</code>, deve ser a função de <em>callback</em> que passaremos como parâmetro do método <code>done()</code> da <strong>Promise</strong>.</p>
<p>Para que isso seja possível, vamos mexer um pouco no método <code>$private.promises()</code> do nosso módulo, fazendo com que, quando os métodos <code>done()</code> e <code>error()</code> do módulo Ajax, quando forem chamados, recebam essa função como callback:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$private.promises = <span class="function"><span class="keyword">function</span> <span class="title">promises</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    done: <span class="function"><span class="keyword">function</span> <span class="title">done</span><span class="params">( callback )</span> </span>{</div><div class="line">      $private.methods.done = callback;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    },</div><div class="line">    error: <span class="function"><span class="keyword">function</span> <span class="title">error</span><span class="params">( callback )</span> </span>{</div><div class="line">      $private.methods.error = callback;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    }</div><div class="line">  };</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Complicou? Pois é, eu disse que seria uma aventura :D</p>
<p>Vou explicar o que acontece: quando invocamos o método <code>get()</code> do nosso módulo, através de:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax();</div><div class="line">ajax.get( <span class="string">'http://localhost:3000/api/users'</span> );</div></pre></td></tr></table></figure>

<p>Nós temos disponíveis outros dois métodos: <code>done()</code> e <code>error()</code>, que são chamados através do <code>return $private.promises()</code> dentro do método <code>get()</code> no nosso módulo.</p>
<p>No método <code>$private.promises()</code> - atualizado acima - nós retornamos esses dois métodos <code>done()</code> e <code>error()</code>, que recebem como parâmetro uma função de callback.</p>
<p>Então, nós atribuímos ao objeto <code>$private.methods</code> o callback passado como parãmetro.</p>
<p>Lá na função de callback do evento <code>readystatechange</code>, você viu que invocamos o <code>$private.methods.done</code> e o <code>$private.methods.error</code> com o <code>call</code>, passando o <code>xhr.responseText</code> como parâmetro desses métodos.</p>
<p>É aproveitando-se da natureza funcional do Javascript que conseguimos fazer as <strong>Promises</strong> conversarem com o retorno dos métodos no momento certo, retornando a interface que temos agora!</p>
<p>E se você perceber, ainda no método <code>$private.promises()</code>, dentro dos métodos <code>done()</code> e <code>error()</code>, nós retornamos o <code>this</code>, que é o próprio objeto retornado nesse método, para que possamos encadear as respostas, exatamente como vimos no <a href="http://blog.da2k.com.br/2015/03/05/javascript-entendendo-e-criando-suas-proprias-promises/" target="_blank" rel="external">primeiro artigo dessa série</a>, mas com jQuery :D</p>
<p>Por isso, nós podemos utilizar nosso módulo dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax();</div><div class="line">ajax.get( <span class="string">'http://localhost:3000/api/users'</span> )</div><div class="line">  .done(<span class="function"><span class="keyword">function</span><span class="params">( response )</span> </span>{</div><div class="line">    <span class="comment">// =&gt; sucesso</span></div><div class="line">  })</div><div class="line">  .error(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="comment">// =&gt; erro</span></div><div class="line">  });</div></pre></td></tr></table></figure>

<p>Vamos executar nosso teste para ver se agora passa:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error: Uncaught SyntaxError: Unexpected token &lt; (http://localhost/<span class="number">00</span>-opensource/ajax/:<span class="number">1</span>)</div><div class="line">    at process.on.global.onerror (http://localhost/<span class="number">00</span>-opensource/ajax/public/mocha.js:<span class="number">6366</span>:<span class="number">10</span>)</div></pre></td></tr></table></figure>

<p>Opa! Alguma coisa deu errado! O que aconteceu?</p>
<p>Vamos tentar debugar, para ver se a resposta está vindo corretamente. Em nosso teste, em <code>tests/test.ajax.js</code>, vamos adicionar um <code>console.log( response )</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">it( <span class="string">'Should return an object'</span>, <span class="function"><span class="keyword">function</span><span class="params">( done )</span> </span>{</div><div class="line">  <span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax();</div><div class="line">  ajax.get( <span class="string">'http://localhost:3000/api/users'</span> ).done(<span class="function"><span class="keyword">function</span><span class="params">( response )</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( response );</div><div class="line">    response.should.be.an( <span class="string">'object'</span> );</div><div class="line">    done();</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>E vemos que, como esperado, o nosso objeto é retornado com sucesso! Mas está dando um erro de sintaxe no teste!</p>
<p>O que acontece é que, em algum momento, o resultado que é retornado por nossa API como JSON, é convertido para <em>string</em>, com <code>toString()</code> (não sei porque o <strong>Mocha</strong> faz isso), e depois, quando tentamos fazer o parse com <code>JSON.parse</code>, acontece o erro de sintaxe.</p>
<p>Como o formato da resposta pode variar, temos que garantir que nosso módulo traga a resposta corretamente. Então vamos fazer uma pequena modificação no método <code>$private.handleReadyStateChange</code> do nosso método, em <code>src/ajax.js</code>, para ficar assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>( xhr.readyState === DONE ) {</div><div class="line">  <span class="keyword">if</span>( xhr.status &gt;= <span class="number">200</span> && xhr.status &lt; <span class="number">300</span> ) {</div><div class="line">    <span class="keyword">return</span> $private.methods.done( $private.parseResponse( xhr.responseText ) );</div><div class="line">  }</div><div class="line">  $private.methods.error( $private.parseResponse( xhr.responseText ) );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Somente vamos chamar um método <code>$private.parseResponse</code>, passando como parâmetro a resposta da requisição. Nesse método, vamos tratar o parse do JSON:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$private.parseResponse = <span class="function"><span class="keyword">function</span> <span class="title">parseResponse</span><span class="params">( response )</span> </span>{</div><div class="line">  <span class="keyword">var</span> result;</div><div class="line">  <span class="keyword">try</span> {</div><div class="line">    result = <span class="built_in">JSON</span>.parse( response );</div><div class="line">  }</div><div class="line">  <span class="keyword">catch</span>( e ) {</div><div class="line">    result = response;</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">};</div></pre></td></tr></table></figure>

<p>E pronto! Simplesmente colocamos o retorno em um bloco <code>try/catch</code>. Se der erro ao tentar parsear, retornamos somente a resposta, que já deve estar em JSON :D</p>
<p>Agora o nosso teste passou! Ufa!</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/03/get-method-return-true.png" alt=""></p>
<p>Agora você está vendo como realmente as <strong>Promises</strong> funcionam. Não precisamos de nenhuma <em>library</em> ou <em>framework</em> para fazê-las funcionar. Claro que não é um trabalho tão simples, mas conhecendo um pouco de programação funcional, nós conseguimos fazer uma funcionalidade onde antes precisaríamos carregar um lib inteira como a <code>Q</code> ou <code>async</code> só para fazer isso!</p>
<p>Mas ainda não acabou: já temos nosso módulo funcional, mas ainda temos testes a fazer! Precisamos testar agora o próximo método: o <code>post</code>.<br>Mas como esse artigo já está grande demais, o método <code>post</code> ficará para o próximo artigo! Não perca :D</p>
<p>Ficou com dúvida de algo? Não fique com vergonha! Comente :D</p>
<p>Até o próximo! o/</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/ajax-module-with-promises4.png" alt=""></p>
<p>Após uma série de 4 posts (<a href="http://blog.da2k.com.br/2015/03/05/javascript-entendendo-e-criando-suas-proprias-promises/" target="_blank" rel="external">aqui</a>, <a href="http://blog.da2k.com.br/2015/03/06/javascript-criando-um-modulo-ajax-com-promises/" target="_blank" rel="external">aqui</a>, <a href="http://blog.da2k.com.br/2015/03/08/javascript-criando-um-modulo-ajax-com-promises-parte-2/" target="_blank" rel="external">aqui</a> e <a href="http://blog.da2k.com.br/2015/03/11/javascript-criando-um-modulo-ajax-com-promises-parte-3/" target="_blank" rel="external">aqui</a>), vamos começar a ver nosso módulo finalmente funcionando! Vem comigo :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="promises" scheme="http://blog.da2k.com.br/tags/promises/"/>
    
      <category term="ajax" scheme="http://blog.da2k.com.br/tags/ajax/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - Criando um módulo Ajax com Promises - Parte 3]]></title>
    <link href="http://blog.da2k.com.br/2015/03/11/javascript-criando-um-modulo-ajax-com-promises-parte-3/"/>
    <id>http://blog.da2k.com.br/2015/03/11/javascript-criando-um-modulo-ajax-com-promises-parte-3/</id>
    <published>2015-03-11T03:00:00.000Z</published>
    <updated>2015-03-23T00:11:38.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/ajax-module-with-promises3.png" alt=""></p>
<p>Já vimos o quanto <em>callback hell</em> é ruim, e como as <strong>Promises</strong> resolvem o problema. Agora estamos criando nosso próprio módulo Ajax, que retorna <strong>Promises</strong> <code>done</code> e <code>error</code> para que saibamos exatamente o momento em que a requisição retornou algum resultado.</p>
<a id="more"></a>

<p>Como vimos no <a href="http://blog.da2k.com.br/2015/03/08/javascript-criando-um-modulo-ajax-com-promises-parte-2/" target="_blank" rel="external">artigo anterior</a>, após todos os nossos testes estarem passando, é hora de verificarmos se nosso código precisa de um <em>refactory</em>. Como tínhamos algumas duplicidades, criamos um novo método e centralizamos o código para remover a duplicidade.</p>
<p>Mas código limpo não vale apenas para o nosso código final, e sim também para os <strong>testes</strong>! Isso mesmo! Se você der uma olhada no nosso arquivo de testes <code>tests/test.ajax.js</code>, vai perceber que, em todos os testes, estamos instanciando o objeto <code>Ajax</code>.</p>
<p>Ainda não precisamos de instâncias diferentes, então podemos centralizar tudo em uma única chamada, no início da função <code>describe()</code>, que centraliza os testes de interface, e remover as chamadas dentro de cada teste (funções <code>it()</code>).</p>
<p>Nosso arquivo de testes, <code>tests/test.ajax.js</code>, refatorado, agora está assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">describe( <span class="string">'Test module interface'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax();</div><div class="line">  </div><div class="line">  it( <span class="string">'Should have `get` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    ajax.should.have.property( <span class="string">'get'</span> );</div><div class="line">  });</div><div class="line">  </div><div class="line">  it( <span class="string">'Should have `post` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    ajax.should.have.property( <span class="string">'post'</span> );</div><div class="line">  });</div><div class="line">  </div><div class="line">  it( <span class="string">'Should have `put` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    ajax.should.have.property( <span class="string">'put'</span> );</div><div class="line">  });</div><div class="line">  </div><div class="line">  it( <span class="string">'Should have `delete` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    ajax.should.have.property( <span class="string">'delete'</span> );</div><div class="line">  });</div><div class="line">  </div><div class="line">  it( <span class="string">'Should `get` method return `done` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> getRequest = ajax.get();</div><div class="line">    getRequest.should.have.property( <span class="string">'done'</span> );</div><div class="line">  });</div><div class="line">  </div><div class="line">  it( <span class="string">'Should `get` method return `error` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> getRequest = ajax.get();</div><div class="line">    getRequest.should.have.property( <span class="string">'error'</span> );</div><div class="line">  });</div><div class="line">  </div><div class="line">  it( <span class="string">'Should `post` method return `done` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> postRequest = ajax.post();</div><div class="line">    postRequest.should.have.property( <span class="string">'done'</span> );</div><div class="line">  });</div><div class="line">  </div><div class="line">  it( <span class="string">'Should `post` method return `error` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> postRequest = ajax.post();</div><div class="line">    postRequest.should.have.property( <span class="string">'error'</span> );</div><div class="line">  });</div><div class="line">  </div><div class="line">  it( <span class="string">'Should `put` method return `done` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> putRequest = ajax.put();</div><div class="line">    putRequest.should.have.property( <span class="string">'done'</span> );</div><div class="line">  });</div><div class="line">  </div><div class="line">  it( <span class="string">'Should `put` method return `error` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> putRequest = ajax.put();</div><div class="line">    putRequest.should.have.property( <span class="string">'error'</span> );</div><div class="line">  });</div><div class="line">  </div><div class="line">  it( <span class="string">'Should `delete` method return `done` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> deleteRequest = ajax.delete();</div><div class="line">    deleteRequest.should.have.property( <span class="string">'done'</span> );</div><div class="line">  });</div><div class="line">  </div><div class="line">  it( <span class="string">'Should `delete` method return `error` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> deleteRequest = ajax.delete();</div><div class="line">    deleteRequest.should.have.property( <span class="string">'error'</span> );</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Agora que temos nosso código refatorado, e nossos testes também refatorados, podemos dar continuidade ao módulo o/</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Precisamos fazer nosso módulo funcionar de verdade. Como a funcionalidade dele depende de requisições <code>get</code>, <code>post</code>, <code>put</code> e <code>delete</code>, antes de escrever a funcionalidade, e até mesmo antes de testar, precisamos ter um ambiente básico de <em>backend</em> que responda à esses métodos.</p>
<p>Vamos então criar uma API Rest básica, com NodeJS, para que possamos testar a resposta à esses 4 métodos.</p>
<h2 id="Criando_a_API_Rest">Criando a API Rest</h2>
<p>Quando falamos sobre como utilizar o <a href="http://blog.da2k.com.br/2015/03/02/gulp-criando-redirecionamentos-com-gulp-connect-connect-modrewrite/" target="_blank" rel="external"><strong>Gulp</strong> com o <strong>connect</strong> e o <strong>modrewrite</strong></a> foi mostrado um exemplo básico de API Rest. Vamos usar a mesma ideia, só incrementando com os métodos <code>put</code> e <code>delete</code>.</p>
<p>Crie um diretório <code>api</code> na raiz do projeto, e um arquivo chamado <code>app.js</code> dentro desse diretório. E então, vamos para o código da nossa API:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span>;</div><div class="line">  </div><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>( <span class="string">'connect'</span> );</div><div class="line"><span class="keyword">var</span> connectRoute = <span class="built_in">require</span>( <span class="string">'connect-route'</span> );</div><div class="line"><span class="keyword">var</span> app = connect();</div><div class="line">  </div><div class="line"><span class="keyword">var</span> users = {</div><div class="line">  joao: { name: <span class="string">'João da Silva'</span>, age: <span class="number">30</span> },</div><div class="line">  maria: { name: <span class="string">'Maria Firmina'</span>, age: <span class="number">26</span> },</div><div class="line">  paulo: { name: <span class="string">'Paulo Torres'</span>, age: <span class="number">25</span> }</div><div class="line">};</div><div class="line">  </div><div class="line">app.use( connectRoute( <span class="function"><span class="keyword">function</span><span class="params">( router )</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">postRequest</span><span class="params">( req, res, next )</span> </span>{</div><div class="line">    res.setHeader( <span class="string">'Content-Type'</span>, <span class="string">'application/json'</span> );</div><div class="line">    res.end( <span class="built_in">JSON</span>.stringify( users[ req.params.slug ] ) );</div><div class="line">  }</div><div class="line">  </div><div class="line">  router.get( <span class="string">'/api/users'</span>, <span class="function"><span class="keyword">function</span><span class="params">( req, res, next )</span> </span>{</div><div class="line">    res.setHeader( <span class="string">'Content-Type'</span>, <span class="string">'application/json'</span> );</div><div class="line">    res.end( <span class="built_in">JSON</span>.stringify( users ) );</div><div class="line">  });</div><div class="line">  </div><div class="line">  router.post( <span class="string">'/api/user/:slug'</span>, postRequest );</div><div class="line">  router.put( <span class="string">'/api/user/:slug'</span>, postRequest );</div><div class="line">  router.delete( <span class="string">'/api/user/:slug'</span>, postRequest );</div><div class="line">}));</div><div class="line">  </div><div class="line">app.listen( <span class="number">3000</span> );</div><div class="line">  </div><div class="line">exports = <span class="built_in">module</span>.exports = app;</div></pre></td></tr></table></figure>

<p>A única diferença para o código que fizemos no outro arquivo são os novos métodos e também exportamos a variável <code>app</code>, para que possamos importar em outro arquivo, e subir nosso servidor com o <strong>Gulp</strong>.</p>
<p>Agora, na raiz do projeto, você precisa instalar os módulos necessários:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev connect connect-route</div></pre></td></tr></table></figure>

<p>E já temos nossa API respondendo à todos os verbos que precisamos! :D</p>
<h2 id="Subindo_o_servidor">Subindo o servidor</h2>
<p>Para subir o servidor, vamos adicionar a nossa API à <em>task</em> <code>default</code> do <strong>Gulp</strong>. No <code>gulpfile.js</code>, altere a <em>task</em> <code>default</code> para ficar assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.task( <span class="string">'default'</span>, [ <span class="string">'assets'</span> ], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">require</span>( <span class="string">'./api/app'</span> );</div><div class="line">  gulp.watch([ allTestFiles, <span class="string">'src/ajax.js'</span> ], [ <span class="string">'test'</span> ]);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Lembra que exportamos o <code>app</code> na API, usando <code>exports = module.exports = app</code>? Esse comando vai servir para que possamos usar o <code>require</code> para adicionar o <code>app.js</code> onde quisermos! No nosso caso, ao executar a task <code>default</code> do <strong>Gulp</strong>, também subiremos nossa API, na porta 3000.</p>
<p>Agora, executando o comando <code>gulp</code> no terminal, você terá os testes rodando, o <em>coverage</em> e também a nossa API Rest, - que pode ser acessado via <code>http://localhost:3000</code> - para testar os métodos do nosso módulo de Ajax! :D</p>
<p>Para testar a API, você pode utilizar o <strong>Postman</strong>, por exemplo :)</p>
<p>Agora já temos tudo o que precisamos para ver nosso módulo funcionando! No próximo artigo vamos finalmente fechar com chave de ouro! :D</p>
<p>Se ficou alguma dúvida, comente!</p>
<p>Até lá! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/ajax-module-with-promises3.png" alt=""></p>
<p>Já vimos o quanto <em>callback hell</em> é ruim, e como as <strong>Promises</strong> resolvem o problema. Agora estamos criando nosso próprio módulo Ajax, que retorna <strong>Promises</strong> <code>done</code> e <code>error</code> para que saibamos exatamente o momento em que a requisição retornou algum resultado.</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="promises" scheme="http://blog.da2k.com.br/tags/promises/"/>
    
      <category term="ajax" scheme="http://blog.da2k.com.br/tags/ajax/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - Criando um módulo Ajax com Promises - Parte 2]]></title>
    <link href="http://blog.da2k.com.br/2015/03/08/javascript-criando-um-modulo-ajax-com-promises-parte-2/"/>
    <id>http://blog.da2k.com.br/2015/03/08/javascript-criando-um-modulo-ajax-com-promises-parte-2/</id>
    <published>2015-03-08T03:00:00.000Z</published>
    <updated>2015-03-23T00:11:38.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/ajax-module-with-promises2.png" alt=""></p>
<p>E então, fez sua lição de casa proposta no <a href="http://blog.da2k.com.br/2015/03/06/javascript-criando-um-modulo-ajax-com-promises/" target="_blank" rel="external">post anterior</a>? xD<br>Vamos então dar continuidade no nosso módulo, para que possamos trabalhar com Ajax de forma organizada, e sem depender de módulos de terceiros o/</p>
<a id="more"></a>

<p>Nosso próximo passo é testar se nosso módulo tem os métodos <code>post</code>, <code>put</code> e <code>delete</code>.</p>
<p>No arquivo <code>tests/test.ajax.js</code>, vamos criar um novo teste, logo após o teste do <code>get</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">it( <span class="string">'Should have `post` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax();</div><div class="line">  ajax.should.have.property( <span class="string">'post'</span> );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Testamos agora pelo método <code>post</code>. É óbvio que ele não existe, mas é por isso que esse teste chama-se TDD, não? Primeiro testamos se algo existe, para que o teste falhe, e logo após, fazemos sua implementação, com o mínimo de código possível.</p>
<p>Vamos então adicionar no arquivo <code>src/ajax.js</code>, logo após o método <code>get</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$public.post = <span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">()</span> </span>{};</div></pre></td></tr></table></figure>

<p>E o nosso teste passa! Agora ficou fácil, não? Vou deixar então pra vocẽ criar os métodos <code>put</code> e <code>delete</code> ;)</p>
<p>Lembrando que você pode acompanhar o desenvolvimento desse módulo <a href="https://github.com/fdaciuk/ajax" target="_blank" rel="external">aqui</a>.</p>
<p>Só um detalhe sobre o método <code>delete</code>: como <code>delete</code> é um operador válido em Javascript, você não pode utilizá-lo como nome de variável ou função, mas pode usá-lo como método ou propriedade de um objeto. Então, vamos nomear nossa função somente como <code>del</code>, no arquivo <code>src/ajax.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$public.delete = <span class="function"><span class="keyword">function</span> <span class="title">del</span><span class="params">()</span> </span>{};</div></pre></td></tr></table></figure>

<p>Assim não teremos problemas ;)</p>
<p><em>Certo, e qual é o próximo passo?</em></p>
<p>Ainda não testamos o retorno dos nossos métodos. Ainda dentro dos testes de interface do nosso módulo, precisamos garantir que eles retornem os métodos <code>done</code> e <code>error</code>. Esses métodos ainda não precisamo funcionar, só precisamos ter certeza que eles serão retornados, já que estamos falando de <strong>Promises</strong> :)</p>
<p>Criaremos um novo teste então, verificando se o nosso método <code>get</code> retorna esses dois outros métodos. No arquivo <code>tests/test.ajax.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">it( <span class="string">'Should `get` method return `done` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax();</div><div class="line">  <span class="keyword">var</span> getRequest = ajax.get();</div><div class="line">  getRequest.should.have.property( <span class="string">'done'</span> );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Testamos primeiro pelo método <code>done</code>. Ele ainda não existe, logo nosso teste falha. Vamos então criá-lo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$public.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    done: <span class="function"><span class="keyword">function</span> <span class="title">done</span><span class="params">()</span> </span>{}</div><div class="line">  };</div><div class="line">};</div></pre></td></tr></table></figure>

<p><em>É só isso? Retornar um método <code>done</code> vazio?</em></p>
<p>Sim! Não é isso que o nosso teste pede: um método <code>done</code>? Então é isso que damos a ele :)</p>
<p>Precisamos sempre pensar simples, para dar somente o código necessário que o nosso teste precisa, e fazê-lo passar. A funcionalidade do método será feita depois, logo, ela será testada depois, então não precisamos nos preocupar com ela agora.</p>
<p>Dessa forma você mantém seus códigos com o mínimo de código possível, fazendo com que tudo fique tão limpo quanto possível :D</p>
<p>Agora precisamos testar o método <code>error</code>. No arquivo de testes <code>test/test.ajax.js</code>, vamos fazer a asserção para esse método:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">it( <span class="string">'Should `get` method return `error` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax();</div><div class="line">  <span class="keyword">var</span> getRequest = ajax.get();</div><div class="line">  getRequest.should.have.property( <span class="string">'error'</span> );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Então, escrevemos o código para que nosso teste passe. Em <code>src/ajax.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$public.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    done: <span class="function"><span class="keyword">function</span> <span class="title">done</span><span class="params">()</span> </span>{},</div><div class="line">    error: <span class="function"><span class="keyword">function</span> <span class="title">error</span><span class="params">()</span> </span>{}</div><div class="line">  };</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Adicionamos o método <code>error</code>, para que seja retornado por <code>get</code> e nosso teste volta a passar!</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p><em>Mas e os outros métodos?</em></p>
<p>Então, todos os nossos métodos precisam retornar os mesmos métodos <code>done</code> e <code>error</code>. Vamos agora testar próximo método, <code>post</code>, para que ele também retorne as <strong>Promises</strong> <code>done</code> e <code>error</code>. Começamos por <code>done</code>. No arquivo <code>tests/test.ajax.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">it( <span class="string">'Should `post` method return `done` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax();</div><div class="line">  <span class="keyword">var</span> postRequest = ajax.post();</div><div class="line">  postRequest.should.have.property( <span class="string">'done'</span> );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Nosso método <code>post</code> também deveria retornar <code>done</code> - assim diz o teste, que por sinal, falhou. Vamos então fazê-lo retornar o método <code>done</code>. No arquivo <code>src/ajax.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$public.post = <span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    done: <span class="function"><span class="keyword">function</span> <span class="title">done</span><span class="params">()</span> </span>{}</div><div class="line">  };</div><div class="line">};</div></pre></td></tr></table></figure>

<p>E nosso teste volta a passar! Mas perceba uma coisa: o retorno do método <code>post</code> é exatamente igual - ou está se encaminhando para ser igual - ao retorno do método <code>get</code>. Como todos os nossos testes até aqui passaram, vamos parar de criar funcionalidades e aplicar o <span style="color: blue">BLUE</span>, fazendo um <em>refactory</em>. No arquivo <code>src/ajax.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ajax</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> $public = {};</div><div class="line">  <span class="keyword">var</span> $private = {};</div><div class="line"></div><div class="line">  $public.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> $private.promises();</div><div class="line">  };</div><div class="line"></div><div class="line">  $public.post = <span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> $private.promises();</div><div class="line">  };</div><div class="line"></div><div class="line">  $public.put = <span class="function"><span class="keyword">function</span> <span class="title">put</span><span class="params">()</span> </span>{};</div><div class="line">  $public.delete = <span class="function"><span class="keyword">function</span> <span class="title">del</span><span class="params">()</span> </span>{};</div><div class="line"></div><div class="line">  $private.promises = <span class="function"><span class="keyword">function</span> <span class="title">promises</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> {</div><div class="line">      done: <span class="function"><span class="keyword">function</span> <span class="title">done</span><span class="params">()</span> </span>{},</div><div class="line">      error: <span class="function"><span class="keyword">function</span> <span class="title">error</span><span class="params">()</span> </span>{}</div><div class="line">    };</div><div class="line">  };</div></pre></td></tr></table></figure>

<p>A função <code>Ajax</code> do nosso módulo agora ficou um pouco mais limpa: removemos a duplicidade do código, criando um método <code>$private.promises</code>, que retorna os métodos da <strong>Promise</strong> - <code>done</code> e <code>error</code>.</p>
<p>Deixamos o método <code>promises()</code> no objeto <code>$private</code>, pois não precisamos que ele seja acessado através da interface do nosso módulo. Ou seja, ninguém conseguirá chamar assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax();</div><div class="line">ajax.promises();</div></pre></td></tr></table></figure>

<p>Isso irá retornar um erro dizendo que <code>undefined is not a function</code>, pois o método <code>promises()</code> não é público :D</p>
<p>Agora só precisamos criar os outros testes de <strong>Promises</strong> para os outros métodos <code>put</code> e <code>delete</code>, para manter tudo documentado.</p>
<p>Como você pode perceber, o resultado dos nossos testes, além de garantir que tudo está funcionando, acabam servindo como documentação do nosso código. Não precisamos usar comentários dentro do módulo para dizer o que cada coisa faz, já que os testes já o fazem por nós :D</p>
<p>Quando alguém ler o resultado dos testes, ele saberá exatamente quais são os métodos disponíveis para uso!</p>
<p>Já temos os testes para toda a nossa interface pronta, mas a continuação ficará para o <a href="http://blog.da2k.com.br/2015/03/09/javascript-criando-um-modulo-ajax-com-promises-parte-3/" target="_blank" rel="external">próximo artigo</a>. Até lá!</p>
<p>Dúvidas até aqui? Comente :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/ajax-module-with-promises2.png" alt=""></p>
<p>E então, fez sua lição de casa proposta no <a href="http://blog.da2k.com.br/2015/03/06/javascript-criando-um-modulo-ajax-com-promises/" target="_blank" rel="external">post anterior</a>? xD<br>Vamos então dar continuidade no nosso módulo, para que possamos trabalhar com Ajax de forma organizada, e sem depender de módulos de terceiros o/</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="promises" scheme="http://blog.da2k.com.br/tags/promises/"/>
    
      <category term="ajax" scheme="http://blog.da2k.com.br/tags/ajax/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - Criando um módulo Ajax com Promises - Parte 1]]></title>
    <link href="http://blog.da2k.com.br/2015/03/06/javascript-criando-um-modulo-ajax-com-promises/"/>
    <id>http://blog.da2k.com.br/2015/03/06/javascript-criando-um-modulo-ajax-com-promises/</id>
    <published>2015-03-06T03:00:00.000Z</published>
    <updated>2015-03-09T03:04:02.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/uploads/2015/03/ajax-module-with-promises.png" alt=""></p>
<p>No <a href="http://blog.da2k.com.br/2015/03/05/javascript-entendendo-e-criando-suas-proprias-promises/" target="_blank" rel="external">artigo anterior</a>, você viu como as <strong>Promises</strong> resolvem o problema de <em>callback hell</em>. Agora vamos ver na prática como criar nossas próprias <strong>Promises</strong>!</p>
<a id="more"></a>

<h2 id="O_que_iremos_fazer?">O que iremos fazer?</h2>
<p>Nosso desafio é criar um módulo para usar <strong>Ajax</strong>, sem qualquer <em>library</em> ou <em>framework</em>, e que possamos obter os resultados das requisições via <strong>Promises</strong>.</p>
<p>O nosso módulo será feito usando a técnica de <a href="http://blog.da2k.com.br/2015/01/06/pensando-tdd-com-javascript/" target="_blank" rel="external">TDD</a>, ou seja, primeiro criamos um teste com o resultado esperado, e então partimos para o código em si :)</p>
<p>E o nosso primeiro passo é criar a estrutura do nosso projeto!</p>
<blockquote>
<p>Você pode acompanhar o andamento desse módulo através <a href="https://github.com/fdaciuk/ajax" target="_blank" rel="external">desse repositório no Github</a> :D</p>
</blockquote>
<h2 id="O_que_dá_pra_fazer_com_Ajax?">O que dá pra fazer com Ajax?</h2>
<p>Acho que o exemplo mais comum é o <a href="https://www.facebook.com/photo.php?fbid=437375279637294&amp;set=pb.100000944779095.-2207520000.1425703771.&amp;type=3&amp;theater" target="_blank" rel="external">carrinho de compras com Ajax.</a></p>
<h2 id="Estrutura_do_projeto">Estrutura do projeto</h2>
<p>Execute o comando abaixo no seu terminal, em um diretório separado para o projeto:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir src tests && touch .editorconfig .jshintrc .gitignore gulpfile.js index.html src/ajax.js tests/test.ajax.js && <span class="built_in">echo</span> <span class="string">"{}"</span> &gt; package.json</div></pre></td></tr></table></figure>

<p>Isso irá gerar a seguinte estrutura:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── .editorconfig</div><div class="line">├── .gitignore</div><div class="line">├── .jshintrc</div><div class="line">├── gulpfile.js</div><div class="line">├── package.json</div><div class="line">├── src</div><div class="line">│   └── ajax.js</div><div class="line">└── tests</div><div class="line">    └── ajaxTest.js</div></pre></td></tr></table></figure>

<p>Com nosso projeto criado, vamos montar nosso ambiente de testes :D</p>
<h2 id="Montando_o_ambiente_de_testes">Montando o ambiente de testes</h2>
<p>Se você ainda não está habituado com testes, ou nunca escreveu um, ou ainda não sabe para o que realmente eles servem, é muito importante que você leia <a href="http://blog.da2k.com.br/2015/01/06/pensando-tdd-com-javascript/" target="_blank" rel="external">esse artigo</a> antes de continuar :D</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Vamos instalar os módulos do <strong>Gulp</strong> necessários para que possamos fazer os testes no nosso módulo:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp gulp-mocha gulp-istanbul gulp-load-plugins chai</div></pre></td></tr></table></figure>

<h2 id="Configurações_dos_arquivos">Configurações dos arquivos</h2>
<p>Nosso arquivo <code>.jshintrc</code> ficará assim:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  "<span class="attribute">curly</span>"   : <span class="value"><span class="literal">true</span></span>,</div><div class="line">  "<span class="attribute">eqeqeq</span>"  : <span class="value"><span class="literal">true</span></span>,</div><div class="line">  "<span class="attribute">immed</span>"   : <span class="value"><span class="literal">true</span></span>,</div><div class="line">  "<span class="attribute">latedef</span>" : <span class="value"><span class="literal">true</span></span>,</div><div class="line">  "<span class="attribute">newcap</span>"  : <span class="value"><span class="literal">true</span></span>,</div><div class="line">  "<span class="attribute">noarg</span>"   : <span class="value"><span class="literal">true</span></span>,</div><div class="line">  "<span class="attribute">sub</span>"     : <span class="value"><span class="literal">true</span></span>,</div><div class="line">  "<span class="attribute">undef</span>"   : <span class="value"><span class="literal">true</span></span>,</div><div class="line">  "<span class="attribute">boss</span>"    : <span class="value"><span class="literal">true</span></span>,</div><div class="line">  "<span class="attribute">eqnull</span>"  : <span class="value"><span class="literal">true</span></span>,</div><div class="line">  "<span class="attribute">node</span>"    : <span class="value"><span class="literal">true</span></span>,</div><div class="line">  "<span class="attribute">globals</span>" : <span class="value">{</span></div><div class="line">    "<span class="attribute">document</span>" : <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">window</span>"   : <span class="value"><span class="literal">true</span></span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Já o <code>.editorconfig</code> terá a seguinte configuração:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="setting">root = <span class="value"><span class="keyword">true</span></span></span></div><div class="line">  </div><div class="line"><span class="title">[*]</span></div><div class="line"><span class="setting">charset = <span class="value">utf-<span class="number">8</span></span></span></div><div class="line"><span class="setting">end_of_line = <span class="value">lf</span></span></div><div class="line"><span class="setting">insert_final_newline = <span class="value"><span class="keyword">false</span></span></span></div><div class="line"><span class="setting">indent_style = <span class="value">space</span></span></div><div class="line"><span class="setting">indent_size = <span class="value"><span class="number">2</span></span></span></div><div class="line"><span class="setting">trim_trailing_whitespace = <span class="value"><span class="keyword">true</span></span></span></div><div class="line">  </div><div class="line"><span class="title">[*.md]</span></div><div class="line"><span class="setting">trim_trailing_whitespace = <span class="value"><span class="keyword">false</span></span></span></div></pre></td></tr></table></figure>

<p>E o <code>.gitignore</code>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node_modules/</div></pre></td></tr></table></figure>

<p>E agora vamos configurar nosso <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span>;</div><div class="line">  </div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> g = <span class="built_in">require</span>( <span class="string">'gulp-load-plugins'</span> )();</div><div class="line">  </div><div class="line"><span class="keyword">var</span> allTestFiles = <span class="string">'./tests/**/*.js'</span>;</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'assets'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src([</div><div class="line">    <span class="string">'node_modules/gulp-mocha/node_modules/mocha/mocha.{js,css}'</span>,</div><div class="line">    <span class="string">'node_modules/chai/chai.js'</span></div><div class="line">  ])</div><div class="line">  .pipe( gulp.dest( <span class="string">'public'</span> ) );</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'mocha'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src([ allTestFiles ], { read : <span class="literal">false</span> })</div><div class="line">  .pipe(</div><div class="line">    g.mocha({ reporter: <span class="string">'list'</span> })</div><div class="line">  );</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'test'</span>, <span class="function"><span class="keyword">function</span><span class="params">( done )</span> </span>{</div><div class="line">  gulp.src([ allTestFiles ])</div><div class="line">    .pipe( g.istanbul() )</div><div class="line">    .on( <span class="string">'finish'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      gulp.src([ allTestFiles ])</div><div class="line">      .pipe( g.mocha() )</div><div class="line">      .on( <span class="string">'error'</span>, done )</div><div class="line">      .pipe( g.istanbul.writeReports() )</div><div class="line">      .on( <span class="string">'end'</span>, done );</div><div class="line">    });</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, [ <span class="string">'assets'</span> ], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.watch([ allTestFiles, <span class="string">'src/ajax.js'</span> ], [ <span class="string">'test'</span> ]);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>E Enfim, nosso ‘index.html’: </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Ajax module in VanillaJS<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"public/mocha.css"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mocha"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"src/ajax.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"public/chai.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"public/mocha.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">mocha.setup(<span class="string">'bdd'</span>)</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"tests/test.ajax.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">mocha.run()</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Acessando essa <code>index.html</code> no seu navegador, você terá acesso à todos os testes, podendo acompanhá-los à medida em que forem sendo implementados :)</p>
<h2 id="Detalhes_do_método">Detalhes do método</h2>
<p>Antes de darmos início, nós precisamos definir o que precisa ser implementado no nosso módulo. Nessa etapa, não vamos definir código, mas sim como ele deve funcionar.</p>
<p>Basicamente, nós queremos que nosso módulo utilize Ajax (<a href="https://developer.mozilla.org/pt-BR/docs/Web/API/XMLHttpRequest" target="_blank" rel="external">XMLHttpRequest</a>), e que ele responda aos métodos <code>get</code>, <code>post</code>, <code>put</code> e <code>delete</code>.</p>
<p>A resposta deve vir no formato de <strong>Promises</strong>, com os métodos <code>done</code> e <code>error</code>.</p>
<p>Esse será nosso <a href="http://pt.wikipedia.org/wiki/Produto_vi%C3%A1vel_m%C3%ADnimo" target="_blank" rel="external">MVP</a>.</p>
<p>Já pode colocar o <strong>Gulp</strong> pra rodar e ficar assistindo nossos arquivos, com o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp</div></pre></td></tr></table></figure>

<h2 id="Usando_o_padrão_UMD">Usando o padrão UMD</h2>
<p>Para que nosso módulo funcione corretamente com CommonJS, AMD ou sem nenhum padrão de módulos específico, precisamos usar o formato <a href="http://blog.da2k.com.br/2015/01/05/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-3-3/" target="_blank" rel="external"><strong>UMD</strong></a>.</p>
<p>Nosso módulo <code>src/ajax.js</code> iniciará com a seguinte estrutura:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> <span class="params">( root, factory )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  <span class="comment">/* istanbul ignore next */</span></div><div class="line">  <span class="keyword">if</span> ( <span class="keyword">typeof</span> define === <span class="string">'function'</span> && define.amd ) {</div><div class="line">    define( <span class="string">'Ajax'</span>, factory );</div><div class="line">  }</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="keyword">typeof</span> exports === <span class="string">'object'</span> ) {</div><div class="line">    exports = <span class="built_in">module</span>.exports = factory();</div><div class="line">  }</div><div class="line">  <span class="keyword">else</span> {</div><div class="line">    root.Ajax = factory();</div><div class="line">  }</div><div class="line">})(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Ajax</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    <span class="keyword">var</span> $private = {};</div><div class="line">  </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> Ajax;</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Das linhas <code>1</code> a <code>13</code>, aplicamos o <strong>UMD</strong>. Agora nosso módulo é Universal :D</p>
<p>O comentário na linha <code>3</code>, é para que o <strong>Istanbul</strong> ignore esse <code>if</code>, pois não teremos os <code>3</code> módulos juntos (AMD, CommonJS e sem nenhum), será somente um desses, então não temos como fazer com que toda essa parte seja coberta por testes. Logo, podemos ignorá-la.</p>
<p><strong>Observação importante:</strong> </p>
<p>Se você tentar incluir esse módulo em qualquer um dos 3 formatos citados acima, vai ver que ele vai funcionar. Quando você não consegue dar cobertura a um código, como é o caso do <strong>UMD</strong>, você precisa, ao menos, garantir manualmente que tudo funciona. Não adianta comentar todo o código para que o <em>Istanbul</em> ignore, pois você estará enganando a si mesmo. Use essa feature com cautela.</p>
<h2 id="Iniciando_os_testes">Iniciando os testes</h2>
<p>Agora sim estamos prontos para começar a codar! Nossa primeira asserção irá testar a interface do nosso módulo. Precisamos garantir que nosso módulo tenha os métodos <code>get</code>, <code>post</code>, <code>put</code> e <code>delete</code>.</p>
<p>Vamos então criar o teste para isso. A base do nosso arquivo <code>tests/test.ajax.js</code> ficará assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> <span class="params">( root, factory )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">if</span> ( <span class="keyword">typeof</span> define === <span class="string">'function'</span> && define.amd ) {</div><div class="line">    define( <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="built_in">require</span>([ <span class="string">'Ajax'</span> ]);</div><div class="line">    });</div><div class="line">  }</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="keyword">typeof</span> exports === <span class="string">'object'</span> ) {</div><div class="line">    exports = <span class="built_in">module</span>.exports = factory( <span class="built_in">require</span>( <span class="string">'chai'</span> ).should(), <span class="built_in">require</span>( <span class="string">'../src/ajax'</span> ) );</div><div class="line">  }</div><div class="line">  <span class="keyword">else</span> {</div><div class="line">    root.Ajax = factory( root.chai.should(), root.Ajax );</div><div class="line">  }</div><div class="line">})(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span><span class="params">( should, Ajax )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  describe( <span class="string">'Test module interface'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    it( <span class="string">'Should have `get` method'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">var</span> ajax = <span class="keyword">new</span> Ajax();</div><div class="line">      ajax.should.have.property( <span class="string">'get'</span> );</div><div class="line">    });</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Vamos adicionar o <strong>UMD</strong> também para o nosso teste, pois ele ficará rodando no terminal, com <strong>Node</strong>. Assim nós poderemos acompanhar os resultados tanto no browser, como no terminal :)</p>
<p>Incluímos a biblioteca <a href="http://chaijs.com/" target="_blank" rel="external">Chai</a>, para fazer as asserções dos nossos testes.</p>
<p>Na linha <code>18</code>, damos início ao teste:</p>
<p>O <code>describe</code> vai criar um <code>wrapper</code> com vários testes de uma parte específica do módulo. Nesse primeiro <code>describe</code>, vamos testar a <em>interface</em> do módulo.</p>
<p>Nosso primeiro teste, na linha <code>19</code>, diz que nosso módulo “Deveria ter um método chamado <strong>get</strong>“.</p>
<p>Instanciamos o objeto do nosso módulo - <code>new Ajax()</code> - e fazemos a asserção, verificando se a propriedade <code>get</code> existe.</p>
<p>E o nosso teste quebra, pois esse método não existe:</p>
<p><img src="/uploads/2015/03/method-get-doesnt-exist.png" alt=""></p>
<p>E esse é exatamente o comportamento esperado, pois ainda não temos código no nosso módulo que o faça funcionar! Esse é o primeiro passo do TDD: O <span style="color: red">RED</span>.</p>
<p>Agora, você lembra qual o próximo passo? Após nosso teste quebrar, pois adicionamos um teste para verificar algo que ainda não existe, vamos tentar fazer o teste passar, com o mínimo de código possível (<em>baby steps</em>):</p>
<p>Adicionamos então ao nosso arquivo <code>src/ajax.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">var</span> $public = {};</div><div class="line">  </div><div class="line">$public.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span> </span>{};</div><div class="line">...</div></pre></td></tr></table></figure>

<p>Pronto, agora temos um método <code>get</code>! Vamos ver se nosso teste passou?</p>
<p><img src="/uploads/2015/03/method-get-pass.png" alt=""></p>
<p>Agora sim! Temos o <span style="color: green">GREEN</span>, pois nosso teste passou. </p>
<p>Podemos ainda acompanhar no terminal como está a cobertura do nosso código:</p>
<p><img src="/uploads/2015/03/code-coverage-ajax-module.jpg" alt=""></p>
<p>Como estamos usando TDD, a tendência é que tenhamos sempre 100% do nosso código coberto por testes! :D</p>
<p>O próximo passo é o <span style="color: blue">BLUE</span>, ou <strong>Refactory</strong>. Nesse caso, não precisamos refatorar nosso código, pois não tem nada a ser refatorado.</p>
<p>Com o passar dos testes, dependendo do <em>baby step</em> que nós utilizarmos, precisaremos refatorar o código para que ele se mantenha em ordem. O passo do <em>refactory</em> serve somente para limpar o código já existente. Você nunca deve incluir nenhuma funcionalidade a mais no momento do <em>refactory</em>. Os testes que passam devem continuar passando, mas a leitura do código deve ser melhor do que você deixou da última vez :)</p>
<p>Curioso para ver como isso continua? Então aguarde o <a href="http://blog.da2k.com.br/2015/03/08/javascript-criando-um-modulo-ajax-com-promises-parte-2/" target="_blank" rel="external">próximo post</a>! :D</p>
<p>Fica como lição de casa pra você fazer os outros 3 testes com os métodos <code>post</code>, <code>put</code> e <code>delete</code>!</p>
<p>Nos próximos artigos, vamos continuar criando nosso módulo, até que ele resolva nosso primeiro objetivo: ter os 4 métodos e responder com as <strong>Promises</strong>.</p>
<p>Ficou com dúvidas? Comentae!</p>
<p>Até lá!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/uploads/2015/03/ajax-module-with-promises.png" alt=""></p>
<p>No <a href="http://blog.da2k.com.br/2015/03/05/javascript-entendendo-e-criando-suas-proprias-promises/" target="_blank" rel="external">artigo anterior</a>, você viu como as <strong>Promises</strong> resolvem o problema de <em>callback hell</em>. Agora vamos ver na prática como criar nossas próprias <strong>Promises</strong>!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="promises" scheme="http://blog.da2k.com.br/tags/promises/"/>
    
      <category term="ajax" scheme="http://blog.da2k.com.br/tags/ajax/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - entendendo e criando suas próprias Promises]]></title>
    <link href="http://blog.da2k.com.br/2015/03/05/javascript-entendendo-e-criando-suas-proprias-promises/"/>
    <id>http://blog.da2k.com.br/2015/03/05/javascript-entendendo-e-criando-suas-proprias-promises/</id>
    <published>2015-03-05T03:00:00.000Z</published>
    <updated>2015-03-23T00:00:38.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/promises.jpg" alt=""></p>
<p>Você já deve ter ouvido falar sobre <strong>Promises</strong>, e provavelmente sabe do problema que elas resolvem. Mas vocẽ sabe como implementar suas próprias <strong>Promises</strong>? Vamos ver como fazer isso na prática! </p>
<a id="more"></a>

<h2 id="O_problema_-_callback_hell">O problema - callback hell</h2>
<p>Sempre que você precisa executar uma ação após uma requisição assíncrona, normalmente o código vai se parecer com isso:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">obj.asyncFunction(<span class="function"><span class="keyword">function</span><span class="params">( response )</span> </span>{</div><div class="line">  response.asyncFunction(<span class="function"><span class="keyword">function</span><span class="params">( response2 )</span> </span>{</div><div class="line">    response2.asyncFunction(<span class="function"><span class="keyword">function</span><span class="params">( response3 )</span> </span>{</div><div class="line">      response3.asyncFunction(<span class="function"><span class="keyword">function</span><span class="params">(response4 )</span> </span>{</div><div class="line">        <span class="keyword">return</span> response4;</div><div class="line">      });</div><div class="line">    });</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Esse é o famoso <strong>callback hell</strong>, onde você depende do retorno de cada requisição para iniciar a próxima! Parece que o <em>Ryu</em> está dando uma hadouken ali!</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/03/hadouken.jpg" alt=""></p>
<p><em>Como resolver?</em></p>
<h2 id="Solução_1:_Métodos_acoplados">Solução 1: Métodos acoplados</h2>
<p>Você pode resolver o <strong>callback hell</strong> usando métodos acoplados, ou seja, um método que vai depender de outro como resposta:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">obj.asyncFunction( responseFunc );</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">responseFunc</span><span class="params">( response )</span> </span>{</div><div class="line">  response.asyncFunction( responseFunc2 );</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">responseFunc2</span><span class="params">( response2 )</span> </span>{</div><div class="line">  response2.asyncFunction( responseFunc3 );</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">responseFunc3</span><span class="params">( response3 )</span> </span>{</div><div class="line">  response3.asyncFunction( responseFunc4 );</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">responseFunc4</span><span class="params">( response4 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> response4;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Isso já ajuda a resolver o problema do <strong>callback hell</strong>. Mas tem uma forma ainda mais elegante: <strong>Promises</strong>!</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Solução_2:_Promises">Solução 2: Promises</h2>
<p>As <strong>Promises</strong>, como o próprio nome diz, são <em>promessas</em> de que você terá um resultado ao final da requisição. Um exemplo é o método <code>$.get</code> do jQuery. Você passa a URL onde você vai buscar seus dados para esse método, e, ao finalizar, você pode utilizar os métodos <code>done()</code>, para saber se o retorno foi bem sucedido, <code>fail()</code> para erro e <code>always()</code> para o final da requisição, independente de sucesso ou erro.</p>
<p>Dessa forma, você consegue utilizar algo como:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$.get( <span class="string">'http://myapp.com/api/data'</span> )</div><div class="line">.done(<span class="function"><span class="keyword">function</span><span class="params">( data )</span> </span>{</div><div class="line">  <span class="comment">// =&gt; retorno com sucesso!</span></div><div class="line">})</div><div class="line">.fail(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// =&gt; retorno com erro!</span></div><div class="line">})</div><div class="line">.always(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// =&gt; final da requisição!</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>Assim você remove o acoplamento de várias funções, e usa métodos encadeados. :)</p>
<p>Essa é a ideia inicial da utilização de <strong>Promises</strong>. Nos próximos artigos, vamos construir um módulo que faz requisições <strong>Ajax</strong>, parecido com esse do jQuery, mas implementando nossas próprias <strong>Promises</strong> de <em>success</em> e <em>error</em> para os verbos <em>get</em>, <em>post</em>, <em>put</em> e <em>delete</em>. Esse nosso módulo será todo <a href="http://blog.da2k.com.br/2015/01/06/pensando-tdd-com-javascript/" target="_blank" rel="external">coberto por testes</a>, então se prepare para uma grande aventura :D</p>
<p>Até lá!</p>
<h2 id="Próximos_artigos_dessa_série:">Próximos artigos dessa série:</h2>
<ul>
<li><a href="http://blog.da2k.com.br/2015/03/06/javascript-criando-um-modulo-ajax-com-promises/" target="_blank" rel="external">Parte 1</a></li>
<li><a href="http://blog.da2k.com.br/2015/03/08/javascript-criando-um-modulo-ajax-com-promises-parte-2/" target="_blank" rel="external">Parte 2</a></li>
<li><a href="http://blog.da2k.com.br/2015/03/11/javascript-criando-um-modulo-ajax-com-promises-parte-3/" target="_blank" rel="external">Parte 3</a></li>
<li><a href="http://blog.da2k.com.br/2015/03/14/javascript-criando-um-modulo-ajax-com-promises-parte-4/" target="_blank" rel="external">Parte 4</a></li>
<li><a href="http://blog.da2k.com.br/2015/03/22/javascript-criando-um-modulo-ajax-com-promises-parte-5/" target="_blank" rel="external">Parte 5</a></li>
</ul>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/promises.jpg" alt=""></p>
<p>Você já deve ter ouvido falar sobre <strong>Promises</strong>, e provavelmente sabe do problema que elas resolvem. Mas vocẽ sabe como implementar suas próprias <strong>Promises</strong>? Vamos ver como fazer isso na prática! </p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="promises" scheme="http://blog.da2k.com.br/tags/promises/"/>
    
      <category term="tdd" scheme="http://blog.da2k.com.br/tags/tdd/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Stylus - Palavras chave em argumentos]]></title>
    <link href="http://blog.da2k.com.br/2015/03/04/stylus-palavras-chave-em-argumentos/"/>
    <id>http://blog.da2k.com.br/2015/03/04/stylus-palavras-chave-em-argumentos/</id>
    <published>2015-03-04T03:00:00.000Z</published>
    <updated>2015-03-04T10:14:25.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/keyword-arguments.png" alt=""></p>
<p>Já vimos como é fácil criar <a href="http://blog.da2k.com.br/2015/02/17/stylus-usando-mixins/" target="_blank" rel="external"><em>mixins</em></a> e <a href="http://blog.da2k.com.br/2015/02/26/stylus-o-poder-das-funcoes/" target="_blank" rel="external"><em>functions</em></a> no <strong>Stylus</strong>. Mas como os parâmetros podem ser passados para obtermos os resultados esperados? Vem comigo que eu te mostro ;)</p>
<a id="more"></a>

<p>O <strong>Stylus</strong> suporta <em>keyword arguments</em>, ou <em>“kwargs”</em>. Isso significa que você não precisa manter a mesma ordem dos parâmetros quando invocar uma <em>function</em> ou um <em>mixin</em>, e inclusive pode fazer algumas variações um bastante diferentes. Vamos ver nos exemplos para ficar mais claro:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="function">rgba</span>(<span class="number">255</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">0.5</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="function">rgba</span>(red: <span class="number">255</span>, green: <span class="number">200</span>, blue: <span class="number">100</span>, alpha: <span class="number">0.5</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="function">rgba</span>(alpha: <span class="number">0.5</span>, blue: <span class="number">100</span>, red: <span class="number">255</span>, <span class="number">200</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="function">rgba</span>(alpha: <span class="number">0.5</span>, blue: <span class="number">100</span>, <span class="number">255</span>, <span class="number">200</span>)</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Que irá compilar:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="function">rgba</span>(<span class="number">255</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">0.5</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="function">rgba</span>(<span class="number">255</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">0.5</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="function">rgba</span>(<span class="number">255</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">0.5</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="function">rgba</span>(<span class="number">255</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">0.5</span>)</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Se você ainda não conhece o <strong>Stylus</strong>, recomendo que leia o <a href="http://blog.da2k.com.br/2015/02/15/escrevendo-css-com-stylus/" target="_blank" rel="external">primeiro artigo da série</a>, para que você possa montar seu ambiente e colocar o <strong>Stylus</strong> pra rodar :)</p>
<p>O <strong>Stylus</strong> tem uma função embutida (_Built-in Function), chamada <code>rgba</code>, que retorna o valor <code>CSS</code> para <code>rgba</code>. </p>
<p>Essa função aceita 4 parâmetros: <code>red</code>, <code>green</code>, <code>blue</code> e <code>alpha</code>. Como você pode ver no exemplo acima, na primeira chamada de <code>color</code>, fazemos no padrão do <strong>CSS</strong>, chamando os parâmetros na ordem em que eles devem ser chamados.</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Na segunda chamada de <code>color</code>, nós nomeamos os parãmetros, ainda mantendo a ordem. E, como você pode ver, a compilação é a mesma.</p>
<p>Agora olhe que loucura: na terceira chamada, os parâmetros não estão em ordem, mas ainda assim as coisas compilam como deveriam, pois o <strong>Stylus</strong> sabe exatamente onde deve colocar cada valor, pois nomeamos os argumentos! </p>
<p>E mais interessante: perceba que o último argumento não está nomeado!</p>
<p><em>Então como o <strong>Stylus</strong> sabe onde deve ir esse valor?</em></p>
<p>Como já tinhamos nomeado <code>alpha</code>, <code>blue</code> e <code>red</code>, o único argumento que sobrou foi o <code>green</code>. Logo, esse valor só pode ser dele ;)</p>
<p>Agora veja a quarta chamada: temos somente dois valores nomeados. Quando isso acontece, o <strong>Stylus</strong> atribui os valores dos argumentos nomeados, e os que não estão nomeados, ele coloca na ordem em que deveriam ser chamados na <em>function</em> ou <em>mixin</em>, excluindo apenas os que já foram passados com nome.</p>
<p>Olhe novamente para a última chamada:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">color</span><span class="value">: <span class="function">rgba</span>(alpha: <span class="number">0.5</span>, blue: <span class="number">100</span>, <span class="number">255</span>, <span class="number">200</span>);</span></div></pre></td></tr></table></figure>

<p>Os valores para <code>alpha</code> e <code>blue</code> o <strong>Stylus</strong> já tem. A ordem para passar os parâmetros é:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">rgba</span><span class="params">(red, green, blue, alpha)</span></span></div></pre></td></tr></table></figure>

<p>Então ainda faltam os valores para <code>red</code> e <code>green</code>, que receberão, respectivamente, os próximos valores :D</p>
<p><em>Mas como eu faço para saber qual a ordem que eu devo passar os parâmetros?</em></p>
<p>O <strong>Stylus</strong> tem uma função chamada <code>p()</code>, que retorna como o <em>mixin</em> ou a <em>function</em> foram criados.</p>
<p>Se você colocar no seu arquivo <strong>Stylus</strong>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">p</span><span class="params">(rgba)</span></span></div></pre></td></tr></table></figure>

<p>Você terá como retorno no seu terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">inspect: rgba(red, green, blue, alpha)</div></pre></td></tr></table></figure>

<p>E isso funciona também para os <em>mixins</em> e <em>functions</em> criados por você! :D</p>
<p>Da hora não?</p>
<p>Aproveite essa incrível ferramenta e até o próximo artigo :)</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/keyword-arguments.png" alt=""></p>
<p>Já vimos como é fácil criar <a href="http://blog.da2k.com.br/2015/02/17/stylus-usando-mixins/" target="_blank" rel="external"><em>mixins</em></a> e <a href="http://blog.da2k.com.br/2015/02/26/stylus-o-poder-das-funcoes/" target="_blank" rel="external"><em>functions</em></a> no <strong>Stylus</strong>. Mas como os parâmetros podem ser passados para obtermos os resultados esperados? Vem comigo que eu te mostro ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="stylus" scheme="http://blog.da2k.com.br/tags/stylus/"/>
    
      <category term="pré-processadores" scheme="http://blog.da2k.com.br/tags/pre-processadores/"/>
    
      <category term="css" scheme="http://blog.da2k.com.br/categories/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gerenciando corretamente dependências em NodeJS - save ou save-dev?]]></title>
    <link href="http://blog.da2k.com.br/2015/03/03/gerenciando-corretamente-dependencias-em-nodejs-save-ou-save-dev-1/"/>
    <id>http://blog.da2k.com.br/2015/03/03/gerenciando-corretamente-dependencias-em-nodejs-save-ou-save-dev-1/</id>
    <published>2015-03-03T03:00:00.000Z</published>
    <updated>2015-03-03T10:30:03.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/save-or-save-dev.png" alt=""></p>
<p><em>Quando eu instalo um módulo do <strong>NodeJS</strong>, devo usar <strong>—save</strong> ou <strong>—save-dev</strong>? E porque eu tenho as duas opções?</em></p>
<p>Vem descobrir ;)</p>
<a id="more"></a>

<p>Post curto, mas pra sanar a dúvida de uma vez por todas:</p>
<p><em>—save ou —save-dev?</em></p>
<p>Em <strong>NodeJS</strong>, quando você está utilizando algum módulo que não faz parte do <strong>core</strong>, você precisa instalá-lo com o comando <code>npm install</code>, ou <code>npm i</code>. E para que você possa facilmente reinstalar esses módulos em vários ambientes diferentes, sem precisar ficar lembrando quais você utilizou, ou fazendo isso manualmente, você cria um arquivo na raiz do seu projeto chamado <code>package.json</code> - que pode ser criado a partir do comando <code>npm init</code>, e respondendo a algumas perguntas - que irá gerenciar todas as dependências do seu projeto.</p>
<p>Quando você instala um módulo utilizando a flag <code>--save</code>, o módulo é salvo em <code>dependencies</code>, dentro do <code>package.json</code>.</p>
<p>Por exemplo: no nosso projeto, nós iremos utilizar o <strong>express</strong> e o <strong>mongoose</strong>. O <strong>Express</strong> é um web framework que irá nos ajudar a facilitar nosso trabalho ao trabalhar com aplicações web no <strong>NodeJS</strong>. Já o <strong>mongoose</strong> é um módulo que vai nos ajudar a modelar nossa base de dados, criada em <strong>Mongo DB</strong>. Para instalá-lo, você vai utilizar o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save express mongoose</div></pre></td></tr></table></figure>

<p>E ele fica salvo no <code>package.json</code>, assim:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"dependencies" : {</div><div class="line">  "express": "^4.12.2",</div><div class="line">  "mongoose": "^3.8.24"</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Aqui você usa o <code>--save</code>, pois esses dois módulos são uma dependência do seu projeto. Você precisa deles em produção, senão a sua aplicação não funciona.</p>
<p>Agora imagine a seguinte situação: você precisa fazer testes unitários na sua aplicação, e vai utilizar o <strong>Mocha</strong> para criar a base dos testes, e o <strong>Chai</strong> para fazer as asserções. Você usa <code>--save</code> ou <code>--save-dev</code>?</p>
<p>A pergunta que deve ser feita antes de instalar é a seguinte: <em>Preciso desse módulo em produção? A minha aplicação funciona sem ele?</em></p>
<p>Se a resposta for “não” para a primeira pergunta, e “sim” para a segunda, você só irá precisar do módulo em ambiente de desenvolvimento. Logo, você pode utilizar o <code>--save-dev</code>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev mocha chai</div></pre></td></tr></table></figure>

<p>E isso irá criar uma entrada <code>devDependencies</code> no seu package.json:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"devDependencies"</span>: {</div><div class="line">  <span class="string">"chai"</span>: <span class="string">"^2.1.0"</span>,</div><div class="line">  <span class="string">"mocha"</span>: <span class="string">"^2.1.0"</span></div><div class="line">}</div></pre></td></tr></table></figure>

<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Essas entradas servem basicamente para facilitar o seu trabalho. Sempre que você precisar reinstalar qualquer um desses módulos, você não precisa utilizar novamente o comando de instalação, deixando explícito o nome dos módulos. Pode usar somente <code>npm i</code>, que o <strong>NPM</strong> irá procurar o seu arquivo <code>package.json</code> e, ao encontrá-lo, irá baixar e instalar todas as dependências em <code>dependencies</code> e <code>devDependencies</code> pra você.</p>
<p>Agora você sabe que deve utilizar o <code>--save</code> somente para instalar módulos que serão usados em produção, e o <code>--save-dev</code> somente para módulos que serão usados no momento do desenvolvimento.</p>
<p>Mas executando o <code>npm i</code>, todos os módulos serão instalados. Imagine que você só quer que, quando estiver no seu servidor de produção, somente os módulos em <code>dependencies</code> sejam instalados, e os módulos em <code>devDependencies</code> sejam ignorados. </p>
<p>Para fazer isso, vocề pode utilizar o comando: </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --production</div></pre></td></tr></table></figure>

<p>Isso é bastante interessante se você estiver utilizando uma ferramenta de <strong>CI</strong>, por exemplo, onde o seu <em>build</em> compila toda a sua aplicação e disponibiliza em produção. Usando o comando acima, somente os módulos em <code>dependencies</code> serão instalados :D</p>
<p>Espero que tenha ficado claro a diferença entre o <code>--save</code> e o <code>--save-dev</code>. Se ainda ficou alguma dúvida, poste nos comentários :D</p>
<p>Até o próximo!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/save-or-save-dev.png" alt=""></p>
<p><em>Quando eu instalo um módulo do <strong>NodeJS</strong>, devo usar <strong>—save</strong> ou <strong>—save-dev</strong>? E porque eu tenho as duas opções?</em></p>
<p>Vem descobrir ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="nodejs" scheme="http://blog.da2k.com.br/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gulp - Criando redirecionamentos com gulp-connect + connect-modrewrite]]></title>
    <link href="http://blog.da2k.com.br/2015/03/02/gulp-criando-redirecionamentos-com-gulp-connect-connect-modrewrite/"/>
    <id>http://blog.da2k.com.br/2015/03/02/gulp-criando-redirecionamentos-com-gulp-connect-connect-modrewrite/</id>
    <published>2015-03-02T03:00:00.000Z</published>
    <updated>2015-03-03T02:55:48.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/gulp-modrewrite.png" alt=""></p>
<p>A situação é basicamente essa: Você está trabalhando em uma <strong>SPA</strong>, e usando <strong>Gulp</strong> para subir seu webserver. Você tem uma API Rest que foi feita em outra linguagem, e responde em outra porta. E o pior: essa aplicação não tem um <em>header</em> que previna o problema com <strong>CORS</strong>. Como resolver isso?</p>
<p>Vou te mostrar nesse post! Vem comigo :D</p>
<a id="more"></a>

<p>Na situação acima, você teria algumas URLs locais da API Rest para consultar, que na verdade, deveriam responder em outra porta. Vamos exemplificar.</p>
<h2 id="Estrutura_de_arquivos">Estrutura de arquivos</h2>
<p>Primeiro precisamos criar nossa estrutura de arquivos. Crie um novo diretório e use o comando abaixo para criá-la:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir api app && touch app/gulpfile.js app/index.html app/main.js api/app.js && <span class="built_in">echo</span> <span class="string">"{}"</span> &gt; api/package.json && <span class="built_in">echo</span> <span class="string">"{}"</span> &gt; app/package.json</div></pre></td></tr></table></figure>

<p>Que vai gerar a seguinte estrutura:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── api</div><div class="line">│   ├── app.js</div><div class="line">│   └── package.json</div><div class="line">└── app</div><div class="line">    ├── gulpfile.js</div><div class="line">    ├── index.html</div><div class="line">    ├── main.js</div><div class="line">│   └── package.json</div></pre></td></tr></table></figure>

<p>Agora, acesse o diretório <code>api</code>, e instale os módulos abaixo:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev connect connect-route</div></pre></td></tr></table></figure>

<h2 id="Criando_a_API_Rest">Criando a API Rest</h2>
<p>Feito isso, vamos criar a API Rest. No arquivo <code>api/app.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span>;</div><div class="line">  </div><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>( <span class="string">'connect'</span> );</div><div class="line"><span class="keyword">var</span> connectRoute = <span class="built_in">require</span>( <span class="string">'connect-route'</span> );</div><div class="line"><span class="keyword">var</span> app = connect();</div><div class="line">  </div><div class="line"><span class="keyword">var</span> users = {</div><div class="line">  joao: { name: <span class="string">'João da Silva'</span>, age: <span class="number">30</span> },</div><div class="line">  maria: { name: <span class="string">'Maria Firmina'</span>, age: <span class="number">26</span> },</div><div class="line">  paulo: { name: <span class="string">'Paulo Torres'</span>, age: <span class="number">25</span> }</div><div class="line">};</div><div class="line">  </div><div class="line">app.use( connectRoute( <span class="function"><span class="keyword">function</span><span class="params">( router )</span> </span>{</div><div class="line">  router.get( <span class="string">'/api/users'</span>, <span class="function"><span class="keyword">function</span><span class="params">( req, res, next )</span> </span>{</div><div class="line">    res.setHeader( <span class="string">'Content-Type'</span>, <span class="string">'application/json'</span> );</div><div class="line">    res.end( <span class="built_in">JSON</span>.stringify( users ) );</div><div class="line">  });</div><div class="line">  </div><div class="line">  router.post( <span class="string">'/api/user/:slug'</span>, <span class="function"><span class="keyword">function</span><span class="params">( req, res, next )</span> </span>{</div><div class="line">    res.setHeader( <span class="string">'Content-Type'</span>, <span class="string">'application/json'</span> );</div><div class="line">    res.end( <span class="built_in">JSON</span>.stringify( users[ req.params.slug ] ) );</div><div class="line">  });</div><div class="line">}));</div><div class="line">  </div><div class="line">app.listen( <span class="number">3000</span> );</div></pre></td></tr></table></figure>

<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Prometo que em breve eu escrevo um post só explicando como criar uma API Rest :)</p>
<p>Esse arquivo está bastante simples: incluímos nossos módulos <code>connect</code> e <code>connect-route</code>, criamos uma lista de usuários em <code>users</code> que irá responder às URLs: <code>/api/users</code> via <strong>GET</strong>, onde todos os usuários do objeto serão retornados; e <code>URL:</code>/api/user/:slug`, via <strong>POST</strong>.</p>
<p>Vamos ver se isso funciona? Execute dentro do diretório <code>api</code>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node app.js</div></pre></td></tr></table></figure>

<p>E acesse no seu navegador: </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:<span class="number">3000</span></div></pre></td></tr></table></figure>

<p>Se tudo deu certo, você deve ter um retorno como esse:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">{<span class="string">"joao"</span>:{<span class="string">"name"</span>:<span class="string">"João da Silva"</span>,<span class="string">"age"</span>:<span class="number">30</span>},<span class="string">"maria"</span>:{<span class="string">"name"</span>:<span class="string">"Maria Firmina"</span>,<span class="string">"age"</span>:<span class="number">26</span>},<span class="string">"paulo"</span>:{<span class="string">"name"</span>:<span class="string">"Paulo Torres"</span>,<span class="string">"age"</span>:<span class="number">25</span>}}</div></pre></td></tr></table></figure>

<p>Ótimo, nosso método <strong>GET</strong> funciona! Agora vamos testar o <strong>POST</strong>! Para o Chrome, existe uma extensão chamada <strong>Postman</strong>. Instale-a para testarmos outros verbos <strong>HTTP</strong>.</p>
<p>Após fazer isso, vamos testar o <strong>POST</strong> da nossa API:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/03/post-user.png" alt=""></p>
<p>Fazemos a requisição, via <strong>POST</strong>, para a URL <code>http://localhost:3000/api/user/joao</code>, e o resultado retornado é o objeto <code>joao</code>!</p>
<p>Pronto! Deixe a API executando e abra uma nova aba no seu terminal. Vamos agora subir o frontend da nossa aplicação em uma porta diferente, para testar um cenário real.</p>
<h2 id="Criando_o_frontend_da_aplicação_que_consumirá_o_Rest">Criando o frontend da aplicação que consumirá o Rest</h2>
<p>Vamos começar instalando os módulos do <strong>Gulp</strong> necessários:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp gulp-connect</div></pre></td></tr></table></figure>

<p>Vamos somente subir nosso servidor, por enquanto. No arquivo <code>app/gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span>;</div><div class="line">  </div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>( <span class="string">'gulp-connect'</span> )();</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// task watch</span></div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  connect.server({</div><div class="line">    root: <span class="string">'.'</span>,</div><div class="line">    port: <span class="number">3001</span></div><div class="line">  });</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, [ <span class="string">'connect'</span>, <span class="string">'watch'</span> ]);</div></pre></td></tr></table></figure>

<p>E no arquivo <code>app/index.html</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Test Gulp ModRewrite<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Test Gulp ModRewrite<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Users:<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-js</span>=<span class="value">"container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"main.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Agora, precisamos requisitar os dados à nossa API, para que eles sejam mostrados na nossa aplicação. No arquivo <code>app/main.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( win, doc, undefined )</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">app</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $private = {};</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    </div><div class="line">    $public.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">      $private.getUsers();</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.getUsers = <span class="function"><span class="keyword">function</span> <span class="title">getUsers</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">      xhr.open( <span class="string">'GET'</span>, <span class="string">'http://localhost:3000/api/users'</span> );</div><div class="line">      xhr.addEventListener( <span class="string">'readystatechange'</span>, $private.readyStateChange, <span class="literal">false</span> );</div><div class="line">      xhr.send();</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.readyStateChange = <span class="function"><span class="keyword">function</span> <span class="title">readyStateChange</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">var</span> xhr = <span class="keyword">this</span>;</div><div class="line">      <span class="keyword">var</span> $container = doc.querySelector( <span class="string">'[data-js="container"]'</span> );</div><div class="line">      <span class="keyword">if</span>( xhr.readyState === <span class="number">4</span> ) {</div><div class="line">        <span class="keyword">if</span>( xhr.status &gt;= <span class="number">200</span> && xhr.status &lt; <span class="number">300</span> ) {</div><div class="line">          $container.innerHTML = xhr.responseText;</div><div class="line">        }</div><div class="line">      }</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  app().init();</div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Basicamente fazemos uma requisição Ajax à <code>http://localhost:3000/api/users</code>, via <strong>GET</strong>, tentando inserir o resultado no elemento <code>div[data-js=&quot;container&quot;]</code>, que colocamos na tela. E a resposta que nós temos é:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/03/post-user-cors.png" alt=""></p>
<p>É isso que a gente merece mesmo! :(</p>
<p>Mas podemos contornar essa situação, usando um módulo chamado <code>connect-modrewrite</code>, (valeu <a href="https://github.com/caarlos0" target="_blank" rel="external">Becker</a> xD) que faz reescritas de URL, semelhante ao que você faz com o <code>.htaccess</code> em PHP, mas em NodeJS :D</p>
<p><em>Como faz?</em></p>
<p>Instale o módulo em <code>app/</code>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev connect-modrewrite</div></pre></td></tr></table></figure>

<p>Agora, vamos configurá-lo no <code>app/gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span>;</div><div class="line">  </div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>( <span class="string">'gulp-connect'</span> );</div><div class="line"><span class="keyword">var</span> modrewrite = <span class="built_in">require</span>( <span class="string">'connect-modrewrite'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// task watch</span></div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  connect.server({</div><div class="line">    root: <span class="string">'.'</span>,</div><div class="line">    port: <span class="number">3001</span>,</div><div class="line">    middleware: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> [</div><div class="line">        modrewrite([ <span class="string">'/api/users http://localhost:3000/api/users [P]'</span> ])</div><div class="line">      ];</div><div class="line">    }</div><div class="line">  });</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, [ <span class="string">'connect'</span>, <span class="string">'watch'</span> ]);</div></pre></td></tr></table></figure>

<p>Incluímos o módulo e adicionamos, no retorno do parâmetro <code>middleware</code>, dentro de <code>connect.server</code>, o código que vai fazer o <code>proxy</code> da nossa URL. Sempre que a nossa URL apontar para <code>/api/users</code>, na verdade será buscado o endereço <code>http://localhost:3000/api/users</code>.</p>
<p>Agora só precisamos alterar a URL no arquivo <code>app/main.js</code> de <code>http://localhost:3000/api/users</code> para <code>/api/users</code> e testar:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/03/post-user-cors-modrewrite.png" alt=""></p>
<p>E olha que loucura! Agora temos o resultado correto, e sem erros!</p>
<p>Esse módulo ajuda muito, principalmente nesses casos. Mas ele serve ainda para qualquer tipo de redirect que você precisar fazer :D</p>
<p>Era isso que eu queria mostrar hoje! Até o próximo post! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/gulp-modrewrite.png" alt=""></p>
<p>A situação é basicamente essa: Você está trabalhando em uma <strong>SPA</strong>, e usando <strong>Gulp</strong> para subir seu webserver. Você tem uma API Rest que foi feita em outra linguagem, e responde em outra porta. E o pior: essa aplicação não tem um <em>header</em> que previna o problema com <strong>CORS</strong>. Como resolver isso?</p>
<p>Vou te mostrar nesse post! Vem comigo :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="gulpjs" scheme="http://blog.da2k.com.br/tags/gulpjs/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gulp connect e livereload]]></title>
    <link href="http://blog.da2k.com.br/2015/03/01/gulp-connect-e-livereload/"/>
    <id>http://blog.da2k.com.br/2015/03/01/gulp-connect-e-livereload/</id>
    <published>2015-03-01T03:00:00.000Z</published>
    <updated>2015-03-01T13:47:50.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/gulp-connect-livereload.png" alt=""></p>
<p>Hoje vamos ver como é simples subir um servidor web usando <strong>NodeJS</strong>, e ainda aproveitar as facilidades do <strong>Gulp</strong> para rodar nossas tarefas diárias, inclusive fazendo <strong>livereload</strong>! Quer ver como é fácil? Vem comigo :D</p>
<a id="more"></a>

<h2 id="Criando_a_estrutura_do_projeto">Criando a estrutura do projeto</h2>
<p>Crie um diretório e execute dentro dele, no terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch gulpfile.js index.html style.css && <span class="built_in">echo</span> <span class="string">"{}"</span> &gt; package.json</div></pre></td></tr></table></figure>

<p>Isso irá criar a estrutura do nosso projeto:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── gulpfile.js</div><div class="line">├── index.html</div><div class="line">├── package.json</div><div class="line">└── style.css</div></pre></td></tr></table></figure>

<h2 id="Instalando_os_módulos_necessários">Instalando os módulos necessários</h2>
<p>Como de praxe, você precisa ter o <strong>NodeJS</strong> instalado, e o <strong>Gulp</strong>, instalado de modo global.</p>
<blockquote>
<p>O quê? Ainda não sabe como usar o <strong>Gulp</strong>? <a href="http://blog.da2k.com.br/2015/01/24/gulpjs-um-gole-de-otimizacao-no-seu-workflow/" target="_blank" rel="external">Esse artigo</a> pode te ajudar a começar! Se quiser saber um pouco mais sobre essa incrível ferramenta, <a href="http://blog.da2k.com.br/tags/gulpjs/" target="_blank" rel="external">aqui</a> você encontra várias coisas legais sobre ele ;)</p>
</blockquote>
<p>Vamos agora instalar os módulos necessários para os nossos testes. Execute no terminal, no diretório do seu projeto:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp gulp-connect</div></pre></td></tr></table></figure>

<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Agora vamos configurar nosso <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span>;</div><div class="line">  </div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>( <span class="string">'gulp-connect'</span> );</div><div class="line"><span class="keyword">var</span> files = [ <span class="string">'index.html'</span>, <span class="string">'style.css'</span> ];</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'files'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( files ).pipe( connect.reload() );</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.watch( files, [ <span class="string">'files'</span> ]);</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  connect.server({ livereload: <span class="literal">true</span> });</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, [ <span class="string">'connect'</span>, <span class="string">'watch'</span> ]);</div></pre></td></tr></table></figure>

<p>As tarefas são bastante simples. Nas linhas <code>3</code> e <code>4</code>, incluímos as dependências: <code>gulp</code> e <code>gulp-connect</code>. Na linha <code>5</code>, criamos um array com os arquivos que serão assistidos e, ao serem alterados, executarão o <code>livereload</code>.</p>
<p>Na linha <code>7</code>, criamos a task <code>files</code>, passamos como <em>source</em> o array já configurado na varável <code>files</code>, e chamamos o <code>connect.reload()</code>. Isso diz ao <code>connect</code> quais arquivos devem ser alterados para que ele faça o reload :)</p>
<p>Na linha <code>11</code>, criamos a task <code>watch</code>, que vai assistir os arquivos, para saber quando eles foram alterados.</p>
<p>Na linha <code>15</code>, criamos a task <code>connect</code>, que vai subir nosso servidor web. Por padrão, ao chamar <code>connect.server()</code>, ele vai usar a porta <code>8080</code>. Para subir em outra porta, passe um parâmetro <code>port</code> no objeto passado para esse método. No exemplo, estamos passando somente o parâmetro <code>livereload: true</code>, para que o <code>livereload</code> seja ativado.</p>
<p>Se quiser ver todas as opção do <code>gulp-connect</code>, você pode visitar a <a href="https://www.npmjs.com/package/gulp-connect" target="_blank" rel="external">documentação completa aqui</a>.</p>
<p>E, para finalizar, na linha <code>19</code>, criamos a task <code>default</code>, que executa as tasks <code>connect</code>, para subir o servidor, e a task <code>watch</code>, para assistir as mudanças nos arquivos <code>index.html</code> e <code>style.css</code>.</p>
<p>Agora execute no seu terminal o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp</div></pre></td></tr></table></figure>

<p>Abra no seu navegador, o endereço <code>http://localhost:8080</code> e você verá uma página em branco. Deixe o navegador e o seu editor lado a lado, e edite o arquivo <code>index.html</code>, colocando um conteúdo básico:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Test Gulp Connect & Livereload<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"style.css"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Gulp Connect & Livereload<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Ao salvar o arquivo, você já vai ver que, sem precisar recarregar a tela, o título <strong>Gulp Connect &amp; Livereload</strong> já irá aparecer!</p>
<p>Agora, brinque um pouco, editando o arquivo <code>style.css</code>, e veja a mágica acontecendo xD</p>
<p>Você pode usar qualquer estrutura de diretórios, e fazer o <code>livereload</code> funcionar para qualquer tipo de arquivo, desde que passe corretamente o caminho dos mesmos.</p>
<p>Bastante simples não? E não precisa adicionar nenhum script a mais na sua <code>index.html</code>! O <code>gulp-connect</code> já faz todo o trabalho sujo xD</p>
<p>Curtiu a dica? Já usa <strong>livereload</strong>? Tem algo a complementar? Compartilhe conosco nos comentários!</p>
<p>Até a próxima :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/03/gulp-connect-livereload.png" alt=""></p>
<p>Hoje vamos ver como é simples subir um servidor web usando <strong>NodeJS</strong>, e ainda aproveitar as facilidades do <strong>Gulp</strong> para rodar nossas tarefas diárias, inclusive fazendo <strong>livereload</strong>! Quer ver como é fácil? Vem comigo :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="gulpjs" scheme="http://blog.da2k.com.br/tags/gulpjs/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress - Criando um formulário de contato sem plugin - Parte 3]]></title>
    <link href="http://blog.da2k.com.br/2015/02/28/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-3/"/>
    <id>http://blog.da2k.com.br/2015/02/28/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-3/</id>
    <published>2015-02-28T03:00:00.000Z</published>
    <updated>2015-03-02T10:10:48.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-form-without-plugin3.png" alt=""></p>
<p>Depois de aprendermos como <a href="http://blog.da2k.com.br/2015/02/22/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-1/" target="_blank" rel="external">criar a <em>view</em></a> para o formulário, de forma que ela converse com o WP, e <a href="http://blog.da2k.com.br/2015/02/24/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-2/" target="_blank" rel="external">inputar o resultado na tela</a>, agora é hora de tratar os dados e enviar o e-mail! <em>Follow-me!</em> :D</p>
<a id="more"></a>

<p>A primeira coisa a se fazer, é verificar se essas informações estão vindo através de um verbo <strong>POST</strong>, pois é assim que o nosso formulário foi configurado para enviar a mensagem. O usuário não deve visualizar nenhuma mensagem antes de executar a ação de enviar o formulário.</p>
<p>No arquivo <code>services/service-contact-form.php</code>, faça uma adição no método <code>send_contact_form()</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send_contact_form</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">if</span>( !<span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">'field_name'</span> ] ) ) {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> (object) <span class="keyword">array</span>(</div><div class="line">        <span class="string">'status'</span> =&gt; <span class="string">'success'</span>,</div><div class="line">        <span class="string">'message'</span> =&gt; <span class="string">'Seu e-mail foi enviado com sucesso!'</span></div><div class="line">    );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Pronto! Agora a mensagem só será mostrada se o campo <code>field_name</code> for enviado via <strong>POST</strong>. Poderíamos testar por qualquer campo do nosso formulário. Só não testamos por <code>!isset( $_POST )</code>, pois <code>$_POST</code> é uma superglobal do PHP, e está sempre disponível, ou seja, isso retornaria sempre <code>true</code>.</p>
<p>O próximo passo é verificar se todos os campos obrigatórios foram preenchidos:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send_contact_form</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">if</span>( !<span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">'field_name'</span> ] ) ) {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="variable">$all_fields</span> = <span class="variable">$this</span><span class="variable">-&gt;get_fields</span>();</div><div class="line">    <span class="variable">$are_all_fields_ok</span> = <span class="variable">$this</span><span class="variable">-&gt;are_all_fields_ok</span>( <span class="variable">$all_fields</span> );</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( ! <span class="variable">$fields_its_ok</span> ) {</div><div class="line">        <span class="comment">// do something</span></div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (object) <span class="keyword">array</span>(</div><div class="line">        <span class="string">'status'</span> =&gt; <span class="string">'success'</span>,</div><div class="line">        <span class="string">'message'</span> =&gt; <span class="string">'Seu e-mail foi enviado com sucesso!'</span></div><div class="line">    );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Passamos para a variável <code>$all_fields</code> o retorno do método <code>get_fields()</code>. Ainda precisamos criá-lo. Depois, passamos para <code>$are_all_fields_ok</code> o retorno do método <code>are_all_fields_ok( $all_fields )</code>. Com isso, podemos verificar se todos os campos que deveriam estar preenchidos, foram feitos corretamente.</p>
<p>Vamos criar então o método `get_fields(), que retorna um array dos campos, com o valor dele, e se ele é obrigatório. Assim fica mais fácil e organizado para tratar os dados:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_fields</span><span class="params">()</span> </span>{</div><div class="line">    <span class="variable">$fields</span> = <span class="keyword">array</span>(</div><div class="line">        <span class="string">'name'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">            <span class="string">'value'</span> =&gt; sanitize_text_field( <span class="variable">$_POST</span>[ <span class="string">'field_name'</span> ] ),</div><div class="line">            <span class="string">'is_required'</span> =&gt; <span class="keyword">true</span></div><div class="line">        ),</div><div class="line">        <span class="string">'email'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">            <span class="string">'value'</span> =&gt; sanitize_email( <span class="variable">$_POST</span>[ <span class="string">'field_email'</span> ] ),</div><div class="line">            <span class="string">'is_required'</span> =&gt; <span class="keyword">true</span></div><div class="line">        ),</div><div class="line">        <span class="string">'subject'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">            <span class="string">'value'</span> =&gt; sanitize_text_field( <span class="variable">$_POST</span>[ <span class="string">'field_subject'</span> ] ),</div><div class="line">            <span class="string">'is_required'</span> =&gt; <span class="keyword">false</span></div><div class="line">        ),</div><div class="line">        <span class="string">'message'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">            <span class="string">'value'</span> =&gt; wp_kses( <span class="variable">$_POST</span>[ <span class="string">'field_message'</span> ], <span class="string">'br'</span> ),</div><div class="line">            <span class="string">'is_required'</span> =&gt; <span class="keyword">true</span></div><div class="line">        )</div><div class="line">    );</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="variable">$fields</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Se não estivéssemos obtendo o resultado de um <strong>POST</strong>, já teríamos retornado <code>false</code> na primeira verificação. Logo, podemos usar esse superglobal aqui com segurança. </p>
<p>Criamos o nosso método como <code>private</code>, pois não precisamos que ele seja acessado externamente. Basicamente o que esse método faz é criar um array com cada campo, onde o valor do campo é passado para <code>value</code> e se o campo é obrigatório ou não, é passado para <code>is_required</code>. O <strong>WordPress</strong> tem uma função chamada <code>sanitize_email()</code> (usada acima), que faz a limpeza dos caracteres do campo. Se houver qualquer tentativa de inserção de tags HTML, script, ou qualquer código malicioso, o valor não será enviado. Só serão aceitos caracteres válidos para um campo de e-mail. O mesmo para <code>sanitize_text_field()</code>.</p>
<p>Já a função <code>wp_kses()</code> - <a href="http://codex.wordpress.org/Function_Reference/wp_kses" target="_blank" rel="external"><em>KSES Strips Evil Scripts</em></a> - remove tags HTML. No segundo parâmetro você pode passar as tags permitidas. No nosso caso, vamos permitir somente quebras de linha (<code>br</code>).</p>
<p>Em posts futuros, falaremos com mais detalhes sobre essas funções. Por enquanto é isso que você precisa saber :)</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Já criamos nosso método que retorna todos os campos, agora precisamos verificar se eles são válidos. Crie o método <code>are_all_fields_ok()</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">are_all_fields_ok</span><span class="params">( <span class="variable">$fields</span> )</span> </span>{</div><div class="line">    <span class="keyword">foreach</span>( <span class="variable">$fields</span> <span class="keyword">as</span> <span class="variable">$field</span> ) {</div><div class="line">        <span class="keyword">if</span>( <span class="variable">$this</span><span class="variable">-&gt;is_field_required_empty</span>( <span class="variable">$field</span> ) ) {</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Fazemos um <code>foreach</code> para passar por todos os campos passados como parâmetro e, se algum campo obrigatório não estiver preenchido, retornamos <code>false</code>. Se todos os campos obrigatórios estiverem preenchidos, então retornamos <code>true</code>.</p>
<p>Perceba que aqui, para verificar se algum campo obrigatório está em branco, nós usamos o método <code>is_field_required_empty()</code>, passando como parâmetro o campo que está sendo iterado no <code>foreach</code>.</p>
<p>Vamos criar esse método?</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">is_field_required_empty</span><span class="params">( <span class="variable">$field</span> )</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="variable">$field</span>[ <span class="string">'is_required'</span> ] && <span class="keyword">empty</span>( <span class="variable">$field</span>[ <span class="string">'value'</span> ] );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Pronto! Essa função verifica se nosso capo é obrigatório e se ele está vazio! Se estiver, então não devemos enviar o formulário! Vamos mostrar uma mensagem de erro ao usuário. Edite o método <code>send_contact_form()</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send_contact_form</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">if</span>( !<span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">'field_name'</span> ] ) ) {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="variable">$all_fields</span> = <span class="variable">$this</span><span class="variable">-&gt;get_fields</span>();</div><div class="line">    <span class="variable">$are_all_fields_ok</span> = <span class="variable">$this</span><span class="variable">-&gt;are_all_fields_ok</span>( <span class="variable">$all_fields</span> );</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( ! <span class="variable">$are_all_fields_ok</span> ) {</div><div class="line">        <span class="keyword">return</span> (object) <span class="keyword">array</span>(</div><div class="line">            <span class="string">'message'</span> =&gt; <span class="string">'Preencha todos os campos!'</span>,</div><div class="line">            <span class="string">'status'</span> =&gt; <span class="string">'error'</span></div><div class="line">        );</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Se você tentar fazer o envio do formulário agora, sem preencher todos os campos obrigatórios, você irá ver a mensagem de erro :D</p>
<p><em>Legal! E agora, qual o próximo passo?</em></p>
<p>O próximo passo é verificar se não estamos <a href="http://blog.da2k.com.br/2015/02/16/acabando-com-spam-nos-seus-formularios/" target="_blank" rel="external">recebendo algum SPAM</a>, testando aquele campo que deixamos oculto.</p>
<p>Vamos fazer primeiro a validação no nosso método <code>send_contact_form()</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send_contact_form</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">if</span>( !<span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">'field_name'</span> ] ) ) {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="variable">$all_fields</span> = <span class="variable">$this</span><span class="variable">-&gt;get_fields</span>();</div><div class="line">    <span class="variable">$are_all_fields_ok</span> = <span class="variable">$this</span><span class="variable">-&gt;are_all_fields_ok</span>( <span class="variable">$all_fields</span> );</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( ! <span class="variable">$are_all_fields_ok</span> ) {</div><div class="line">        <span class="keyword">return</span> (object) <span class="keyword">array</span>(</div><div class="line">            <span class="string">'message'</span> =&gt; <span class="string">'Preencha todos os campos!'</span>,</div><div class="line">            <span class="string">'status'</span> =&gt; <span class="string">'error'</span></div><div class="line">        );</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( <span class="variable">$this</span><span class="variable">-&gt;is_spam</span>() ) {</div><div class="line">        <span class="keyword">return</span> (object) <span class="keyword">array</span>(</div><div class="line">            <span class="string">'message'</span> =&gt; <span class="string">'Erro ao enviar mensagem. Tente novamente mais tarde.'</span>,</div><div class="line">            <span class="string">'status'</span> =&gt; <span class="string">'error'</span></div><div class="line">        );</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>É hora de criar um outro método para verificação. Vamos chamá-lo de <code>is_spam()</code>, para verificar se tem algum robô engraçadinho tentando nos sacanear:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">is_spam</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">if</span>( <span class="variable">$this</span><span class="variable">-&gt;has_malicious_content</span>() ||</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;has_more_than_three_links</span>() ||</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;spam_field_is_filled</span>()</div><div class="line">    ) {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">has_malicious_content</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> preg_match( <span class="string">'/bcc:|cc:|multipart|\[url|\[link|Content-Type:/i'</span>, implode( <span class="variable">$_POST</span> ) );</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">has_more_than_three_links</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> preg_match_all( <span class="string">'/&lt;a|http:/i'</span>, implode( <span class="variable">$_POST</span> ) ) &gt; <span class="number">3</span>;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">spam_field_is_filled</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> !<span class="keyword">empty</span>( <span class="variable">$_POST</span>[ <span class="string">'field_mail'</span> ] );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Criamos 3 novos métodos para verificação de <strong>SPAM</strong>: O método <code>has_malicious_content()</code>, irá verificar se foi inserido algo com <code>bcc:</code>, <code>cc:</code>, <code>multipart</code>, <code>[url</code>, <code>[link</code> e <code>Content-Type</code>, ignorando case sensitive (<code>/i</code>), em todos os campos.</p>
<p>O <code>has_more_than_three_links()</code>, verifica se existem mais de 3 links sendo enviados. Se você achar que 3 é muito, pode diminuir para o seu caso. Aqui usamos <code>preg_match_all</code> ao invés de <code>preg_match</code>, pois ele retorna a quantidade de vezes que um valor da regex foi encontrado;</p>
<p>E por último, mas não menos importante, temos o <code>spam_field_is_filled()</code>, onde verificamos o nosso campo de e-mail fake, pra saber se ele foi preenchido.</p>
<p>Se qualquer uma dessas condições for verdadeira, entendemos que estão tentando nos enviar <strong>SPAM</strong>, e ignoramos o envio, retornando <code>true</code> para <code>is_spam()</code>. Caso contrário, retornamos <code>false</code>.</p>
<p>Não precisamos do <code>else</code> pois, sempre que um valor é retornado (usando <code>return</code>), o PHP nem continua a leitura do que vem depois desse código. Assim deixamos também nosso método mais legível.</p>
<p>Bom, se olharmos para o nosso método principal, dá pra perceber que ele está um pouco verboso demais. Estamos retornando dois arrays (convertidos para objeto), com a mesma estrutura, mas que muda somente a mensagem interna. Vamos deixar isso mais organizado, e colocar essas mensagens também em um método. Até porque, ainda vamos precisar de mais uma mensagem: a de sucesso.</p>
<p>Editando então nosso método <code>send_contact_form()</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send_contact_form</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">if</span>( !<span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">'field_name'</span> ] ) ) {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="variable">$all_fields</span> = <span class="variable">$this</span><span class="variable">-&gt;get_fields</span>();</div><div class="line">    <span class="variable">$are_all_fields_ok</span> = <span class="variable">$this</span><span class="variable">-&gt;are_all_fields_ok</span>( <span class="variable">$all_fields</span> );</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( ! <span class="variable">$are_all_fields_ok</span> ) {</div><div class="line">        <span class="keyword">return</span> <span class="variable">$this</span><span class="variable">-&gt;get_status_message</span>( <span class="string">'error'</span> );</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( <span class="variable">$this</span><span class="variable">-&gt;is_spam</span>() ) {</div><div class="line">        <span class="keyword">return</span> <span class="variable">$this</span><span class="variable">-&gt;get_status_message</span>( <span class="string">'error_sent'</span> );</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Vamos obter, através de um método chamado <code>get_status_message()</code>, as mensagens de status, conforme o parâmetro passado para esse método.</p>
<p>Nosso método <code>get_status_message()</code> vai ficar assim:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_status_message</span><span class="params">( <span class="variable">$status</span> = <span class="string">'success'</span> )</span> </span>{</div><div class="line">    <span class="variable">$message</span> = <span class="keyword">array</span>(</div><div class="line">        <span class="string">'success'</span> =&gt; <span class="variable">$this</span><span class="variable">-&gt;get_status_message_success</span>(),</div><div class="line">        <span class="string">'error'</span> =&gt; <span class="variable">$this</span><span class="variable">-&gt;get_status_message_error</span>(),</div><div class="line">        <span class="string">'error_sent'</span> =&gt; <span class="variable">$this</span><span class="variable">-&gt;get_status_message_error_sent</span>()</div><div class="line">    );</div><div class="line">    <span class="keyword">return</span> (object) <span class="variable">$message</span>[ <span class="variable">$status</span> ];</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Não adianta nada tirar uma tripa de arrays do método principal e simplesmente jogar em outro método, concorda? Por isso, vamos criar um método para cada mensagem. Passamos como padrão o status <code>success</code>, ou seja, se esse método for chamado sem nenhum parâmetro, retornamos a mensagem de sucesso :)</p>
<p>No final, o array retornado é o objeto que precisamos na nossa view :D</p>
<p>Vamos ver como irão ficar esses 3 novos métodos com os status:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_status_message_success</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</div><div class="line">        <span class="string">'message'</span> =&gt; <span class="string">'Mensagem enviada com sucesso!'</span>,</div><div class="line">        <span class="string">'status'</span> =&gt; <span class="string">'success'</span></div><div class="line">    );</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_status_message_error</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</div><div class="line">        <span class="string">'message'</span> =&gt; <span class="string">'Preencha todos os campos!'</span>,</div><div class="line">        <span class="string">'status'</span> =&gt; <span class="string">'error'</span></div><div class="line">    );</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_status_message_error_sent</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</div><div class="line">        <span class="string">'message'</span> =&gt; <span class="string">'Erro ao enviar mensagem. Tente novamente mais tarde.'</span>,</div><div class="line">        <span class="string">'status'</span> =&gt; <span class="string">'error'</span></div><div class="line">    );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Ah, agora sim! Bem melhor! Cada método fica pequeno, legível, e com uma responsabilidade única :)</p>
<p>Agora, se você tentar enviar o e-mail, preenchendo o campo de e-mail <em>fake</em>, vai receber uma mensagem de erro :D</p>
<p>Estamos quase lá! Vamos então fazer a última verificação: tentar enviar o e-mail, e verificar se este foi enviado com sucesso. No nosso método <code>send_contact_form()</code>, adicione:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send_contact_form</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">if</span>( !<span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">'field_name'</span> ] ) ) {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="variable">$all_fields</span> = <span class="variable">$this</span><span class="variable">-&gt;get_fields</span>();</div><div class="line">    <span class="variable">$are_all_fields_ok</span> = <span class="variable">$this</span><span class="variable">-&gt;are_all_fields_ok</span>( <span class="variable">$all_fields</span> );</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( ! <span class="variable">$are_all_fields_ok</span> ) {</div><div class="line">        <span class="keyword">return</span> <span class="variable">$this</span><span class="variable">-&gt;get_status_message</span>( <span class="string">'error'</span> );</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( <span class="variable">$this</span><span class="variable">-&gt;is_spam</span>() ) {</div><div class="line">        <span class="keyword">return</span> <span class="variable">$this</span><span class="variable">-&gt;get_status_message</span>( <span class="string">'error_sent'</span> );</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( ! <span class="variable">$this</span><span class="variable">-&gt;message_sent</span>( <span class="variable">$all_fields</span> ) ) {</div><div class="line">        <span class="keyword">return</span> <span class="variable">$this</span><span class="variable">-&gt;get_status_message</span>( <span class="string">'error_sent'</span> );</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="variable">$this</span><span class="variable">-&gt;get_status_message</span>( <span class="string">'success'</span> );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Nessa última verificação, vamos ver se a mensagem foi enviada corretamente. Invocamos o método <code>message_sent()</code>, passando os campos como parâmetro já dentro de um <code>if</code>, pois o retorno dele vai nos dizer se a mensagem foi enviada com sucesso ou não. </p>
<p>Se não foi, retornamos a mesma mensagem que é enviada quando o usuário tenta enviar um <strong>SPAM</strong>. Aqui você pode criar sua própria mensagem se preferir. Como é a mesma mensagem, poderíamos ter juntado, no mesmo <code>if</code> do <code>is_spam()</code>. Mas assim facilita a leitura, e você consegue ver exatamente quais passos estão sendo feitos antes de tentar enviar a mensagem.</p>
<p>E o último <code>return</code>, envia a mensagem com status de sucesso. Se não deu nenhum erro, quer dizer que foi tudo bem :)<br>O parâmetro <code>success</code> é opcional, pois deixamos setado como padrão no método <code>get_status_message()</code>. Vamos deixar assim só para ficar mais legível ;)</p>
<p>Vamos então criar nosso método que envia o e-mail:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">message_sent</span><span class="params">( <span class="variable">$fields</span> )</span> </span>{</div><div class="line">    <span class="variable">$to</span> = <span class="string">'quem-recebe-o@email.com'</span>;</div><div class="line">    <span class="variable">$subject</span> = <span class="string">'E-mail enviado pelo site lalala.com.br - '</span> . <span class="variable">$fields</span>[ <span class="string">'subject'</span> ][ <span class="string">'value'</span> ];</div><div class="line">    <span class="variable">$message</span> = <span class="variable">$this</span><span class="variable">-&gt;message_to_sent</span>( <span class="variable">$fields</span> );</div><div class="line">    <span class="variable">$headers</span> = <span class="keyword">array</span>(</div><div class="line">        <span class="string">'Reply-To: '</span> . <span class="variable">$fields</span>[ <span class="string">'email'</span> ][ <span class="string">'value'</span> ]</div><div class="line">    );</div><div class="line">    <span class="variable">$attachments</span> = <span class="string">''</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> wp_mail( <span class="variable">$to</span>, <span class="variable">$subject</span>, <span class="variable">$message</span>, <span class="variable">$headers</span>, <span class="variable">$attachments</span> );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Aqui executamos o retorno da função <code>wp_mail()</code>, que retorna <code>true</code> se conseguiu enviar o e-mail, e false, caso contrário. Mas antes, nós configuramos algumas variáveis, até para saber a ordem correta dos parâmetros passados para a função <code>wp_mail()</code>.</p>
<p>O primeiro é o <code>$to</code>, que é o e-mail que vai receber a mensagem. O segundo, <code>$subject</code>, é o assunto do e-mail. No nosso formulário já tem esse campo, mas ele não é obrigatório. Vamos então deixar uma mensagem padrão antes de concatenar o valor desse campo, para que a gente saiba que o e-mail foi enviado pelo formulário de contato do site.</p>
<p>Como nós vamos configurar nossa mensagem para ser enviada em <strong>HTML</strong>, vamos colocá-la em um método separado, para não deixar esse muito grande.</p>
<p>Ainda podemos configurar alguns <code>$headers</code>, como <code>Reply-To:</code>, que é o e-mail para quem nós devemos responder, ao clicar no botão <strong>Responder</strong> do seu e-mail. Podemos também configurar para recebermos uma cópia (<code>Cc:</code>), ou cópia oculta (<code>Bcc:</code>) em outro e-mail. Se esse formulário envia e-mail para o seu cliente, é importante saber se os e-mails estão chegando corretamente, então você pode configurar esses campos de cópia. Ou ainda simplesmente para enviar para mais de uma pessoa de uma só vez.</p>
<p>Não vamos enviar nenhum anexo, então deixamos o <code>$attachments</code> em branco.</p>
<p>Agora só falta nosso método que gera a mensagem:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">message_to_sent</span><span class="params">( <span class="variable">$fields</span> )</span> </span>{</div><div class="line">    <span class="variable">$message</span>  = sprintf( <span class="string">'&lt;h1&gt;Assunto: %s&lt;/h1&gt;'</span>, <span class="variable">$fields</span>[ <span class="string">'subject'</span> ][ <span class="string">'value'</span> ] );</div><div class="line">    <span class="variable">$message</span> .= sprintf( <span class="string">'&lt;h2&gt;De: %s&lt;/h2&gt;'</span>, <span class="variable">$fields</span>[ <span class="string">'email'</span> ][ <span class="string">'value'</span> ] );</div><div class="line">    <span class="variable">$message</span> .= sprintf( <span class="string">'&lt;h2&gt;Mensagem:&lt;/h2&gt;&lt;p&gt;%s&lt;/p&gt;'</span>, <span class="variable">$fields</span>[ <span class="string">'message'</span> ][ <span class="string">'value'</span> ] );</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="variable">$message</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Um HTML simples, que retorna uma string com algumas tags, para deixar o e-mail mais organizado. Utilizamos <code>sprintf()</code> aqui para substituir os <code>%s</code>, passados na string. A partir do segundo parâmetro dessa função, o PHP começa a substituir cada <code>%s</code> por um desses parâmetros, nessa ordem.</p>
<p>No final, retornamos a string da mensagem :)</p>
<p>E assim nós terminamos nosso formulário de contato, com várias validações importantes, e sem precisar de plugin algum! Claro que poderíamos fazer muitas outras melhorias, como por exemplo, colocar um metabox na página de contato para que o cliente adicione os e-mails que ele quer usar para receber o contato, mas isso é assunto para outro post!</p>
<p>Até o próximo! :D</p>
<blockquote>

<p><strong>Link para o índice dessa série: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/02/24/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-2/" target="_blank" rel="external">http://blog.da2k.com.br/2015/02/24/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-2/</a></p>
<p><strong> Próximo post:</strong><br><a href="">EM BREVE!</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-form-without-plugin3.png" alt=""></p>
<p>Depois de aprendermos como <a href="http://blog.da2k.com.br/2015/02/22/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-1/" target="_blank" rel="external">criar a <em>view</em></a> para o formulário, de forma que ela converse com o WP, e <a href="http://blog.da2k.com.br/2015/02/24/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-2/" target="_blank" rel="external">inputar o resultado na tela</a>, agora é hora de tratar os dados e enviar o e-mail! <em>Follow-me!</em> :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - como funcionam as funções recursivas]]></title>
    <link href="http://blog.da2k.com.br/2015/02/27/javascript-como-funcionam-as-funcoes-recursivas/"/>
    <id>http://blog.da2k.com.br/2015/02/27/javascript-como-funcionam-as-funcoes-recursivas/</id>
    <published>2015-02-27T03:00:00.000Z</published>
    <updated>2015-03-07T06:13:22.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/recursion.jpg" alt=""></p>
<p><em>O que é <strong>recursão</strong> e como aplicar em <strong>JS</strong>? Como isso pode melhorar meu código?</em> Sexta, no Globo Repórter!<br>Não, pera… vem comigo que eu te mostro AGORA! :D</p>
<a id="more"></a>

<h2 id="O_que_é_recursão?">O que é recursão?</h2>
<p>Em desenvolvimento de software, <strong>recursão</strong> é quando você tem uma chamada para um método ou função dela para ela mesma.</p>
<p><em>Hãn?</em></p>
<p>Você já colocou um espelho em frente ao outro? A imagem de um refletindo no outro, que reflete no um, que reflete no outro, que reflete… então, isso é um exemplo de recursão :)</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/recursion.gif" alt=""></p>
<h2 id="Quando_eu_devo_usar_funções_recursivas?">Quando eu devo usar funções recursivas?</h2>
<p>Quando você precisa executar a mesma tarefa repetidas vezes, pode ser um caso onde a recursão vai ser útil.</p>
<p>Vamos a um exemplo bastante útil: você vai mostrar uma mensagem a cada vez que um grilo chiar. Você passa como parâmetro da função, quantas vezes você quer que aconteça o chiado, e a função retorna com a palavra <code>chirp</code> a cada vez.</p>
<p>Sem usar recursão, nossa implementação se pareceria com isso:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">chirp</span><span class="params">(n)</span> </span>{</div><div class="line">  <span class="keyword">var</span> ch = <span class="string">'chirp'</span>;</div><div class="line">  <span class="keyword">if</span>( n &lt; <span class="number">1</span> || <span class="built_in">isNaN</span>(n) ) <span class="keyword">return</span>;</div><div class="line">  <span class="keyword">for</span>( <span class="keyword">var</span> i = n - <span class="number">1</span>; i--; ) {</div><div class="line">    ch += <span class="string">'-chirp'</span>;</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> ch;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Invocando a função, temos como resultado:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chirp( <span class="number">3</span> ); <span class="comment">// =&gt; "chirp-chirp-chirp"</span></div></pre></td></tr></table></figure>

<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Agora, usando o formato recursivo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">chirp</span><span class="params">( n )</span> </span>{</div><div class="line">  <span class="keyword">if</span>( n &lt; <span class="number">1</span> || <span class="built_in">isNaN</span>( n ) ) <span class="keyword">return</span>;</div><div class="line">  <span class="keyword">return</span> n &lt; <span class="number">2</span> ? <span class="string">'chirp'</span> : chirp( n - <span class="number">1</span> ) + <span class="string">'-chirp'</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>E a invocação traz o mesmo resultado:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chirp( <span class="number">3</span> ) <span class="comment">// =&gt; "chirp-chirp-chirp"</span></div></pre></td></tr></table></figure>

<p>Se fizermos um teste de mesa, fica mais fácil entender como uma função recursiva funciona:</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Valor de <code>n</code></th>
<th>Retorno da função</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Invocação da função (fora)</td>
<td style="text-align:center">3</td>
<td><code>n</code> é menor 2? Não. Então invoca a função de novo e aguarda o resultado para concatenar com <code>-chirp</code>.</td>
</tr>
<tr>
<td style="text-align:center">Primeira invocação recursiva</td>
<td style="text-align:center">2</td>
<td><code>n</code> é menor que 2? Não. Então invoca a função de novo e aguarda o resultado para concatenar com <code>-chirp</code> de agora, e o <code>-chirp</code> anterior.</td>
</tr>
<tr>
<td style="text-align:center">Segunda invocação recursiva</td>
<td style="text-align:center">1</td>
<td><code>n</code> é menor que 2? Sim. Então, retorna <code>chirp</code> e volta com esse resultado para concatenar com os resultados anteriores que haviam ficado aguardando. Pega esse último <code>chirp</code>, concatena com o penúltimo <code>-chirp</code>, e então, concatena isso com o primeiro <code>-chirp</code>. Resultado final: <code>chirp-chirp-chirp</code>.</td>
</tr>
</tbody>
</table>
<p>Você pode perceber que o resultado fica aguardando até que a última chamada recursiva seja concluída, para então concatenar os resultados. Em alguns casos, isso pode se tornar mais lento que a forma não recursiva. Mas dependendo do caso, pode se tornar mais legível, facilitando a manutenção. O uso deve ser avaliado conforme a situação.</p>
<p>Perceba também que, para obtermos a recursão, nós precisamos basicamente de 2 coisas:</p>
<ol>
<li>A função deve se auto-invocar, no interior dela mesma;</li>
<li>É necessário uma verificação para que possamos concluir a recursão. Caso contrário, teremos um <strong>loop infinito</strong>!</li>
</ol>
<p>Esse é o princípio básico da recursão :)</p>
<p>Espero que tenha ficado claro! Se ainda ficaram dúvidas, poste nos comentários :D</p>
<p>Até a próxima aventura! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/recursion.jpg" alt=""></p>
<p><em>O que é <strong>recursão</strong> e como aplicar em <strong>JS</strong>? Como isso pode melhorar meu código?</em> Sexta, no Globo Repórter!<br>Não, pera… vem comigo que eu te mostro AGORA! :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="recursão" scheme="http://blog.da2k.com.br/tags/recursao/"/>
    
      <category term="functional programming" scheme="http://blog.da2k.com.br/tags/functional-programming/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Stylus - o poder das funções]]></title>
    <link href="http://blog.da2k.com.br/2015/02/26/stylus-o-poder-das-funcoes/"/>
    <id>http://blog.da2k.com.br/2015/02/26/stylus-o-poder-das-funcoes/</id>
    <published>2015-02-26T03:00:00.000Z</published>
    <updated>2015-02-27T10:11:04.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/stylus-the-power-of-functions.png" alt=""></p>
<p>Funções são bastante parecidas com <em>mixins</em>, no <strong>Stylus</strong>. A grande diferença é que elas podem retornar valores! Vamos ver como elas funcionam? ;)</p>
<a id="more"></a>

<p>Podemos, por exemplo, criar uma função que soma dois valores passados como argumento:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">add</span>( <span class="operator">a</span>, b )</div><div class="line">  <span class="operator">a</span> + b</div><div class="line">  </div><div class="line">.wrapper</div><div class="line">  width <span class="built_in">add</span>( <span class="number">600</span>px, <span class="number">15</span> )</div></pre></td></tr></table></figure>

<p>Que compila para:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class">.wrapper</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">615px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h2 id="Valores_padrão">Valores padrão</h2>
<p>Podemos também passar valores <em>default</em> para os argumentos:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">add</span>( <span class="operator">a</span>, b = <span class="operator">a</span> )</div><div class="line">  <span class="operator">a</span> + b</div><div class="line">  </div><div class="line"><span class="built_in">add</span>( <span class="number">10</span>, <span class="number">5</span> )<span class="comment"> // =&gt; 15</span></div><div class="line">  </div><div class="line"><span class="built_in">add</span>( <span class="number">10</span> )<span class="comment"> // =&gt; 20</span></div></pre></td></tr></table></figure>

<p>Os valores <em>default</em> dos argumentos nada mais são do que atribuições. Logo, nós podemos também passar funções como valores <em>default</em>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">add</span>( <span class="operator">a</span>, b = unit( <span class="operator">a</span>, px ) )</div><div class="line">  <span class="operator">a</span> + b</div><div class="line">  </div><div class="line"><span class="built_in">add</span>( <span class="number">20</span> )<span class="comment"> // =&gt; 40px</span></div></pre></td></tr></table></figure>

<p>Repare que o resultado de <code>add( 20 )</code> não é <code>20px</code>, e sim <code>40px</code>. A função <code>unit()</code> faz parte do Stylus. Ela adiciona uma unidade de medida ao valor passado no primeiro parâmetro. O que nós estamos fazendo é atribuir para <code>b</code>, o valor passado para <code>a</code>, e ainda adicionando a unidade <code>px</code>.</p>
<p>Já conseguiu imaginar as milhões de possibilidades que você pode fazer com isso? xD</p>
<h2 id="Parâmetros_nomeados">Parâmetros nomeados</h2>
<p>Podemos também passar valores específicos para as funções. Veja o exemplo:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">subtract</span>( <span class="operator">a</span>, b )</div><div class="line">  <span class="operator">a</span> - b</div><div class="line">  </div><div class="line"><span class="built_in">subtract</span>( b: <span class="number">10</span>, <span class="operator">a</span>: <span class="number">20</span> )<span class="comment"> // =&gt; 10</span></div></pre></td></tr></table></figure>

<p>Se nós somente passássemos os valores <code>( 10, 20 )</code> para a função <code>subtract</code>, o resultado seria <code>-10</code>. Mas nós podemos nomear os valores, não necessitando assim passar os parãmetros na mesma ordem em que foram definidos na função. Por isso o resultado é <code>10</code> positivo. :D</p>
<p>Você ainda pode passar apenas um dos valores. Se o outro não for passado, ele será <code>undefined</code>, então podemos utilizar valores padrão para os parâmetros que não são obrigatórios:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">subtract</span>( <span class="operator">a</span> = <span class="number">5</span>, b )</div><div class="line">  <span class="operator">a</span> - b</div><div class="line">  </div><div class="line"><span class="built_in">subtract</span>( b: <span class="number">2</span> )<span class="comment"> // =&gt; 3</span></div></pre></td></tr></table></figure>

<p>Locurage! :D</p>
<h2 id="Retorno_de_múltiplos_valores">Retorno de múltiplos valores</h2>
<p>Podemos retornar valores como se estivéssemos usando um <code>array</code> em JS. Se atribuirmos vários valores à uma variável, usamos a notação de <code>array</code> para obter um valor. Exemplo:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">sizes </span>=<span class="string"> 15px 20px</span></div><div class="line">  </div><div class="line">sizes[0] // =&gt; 15px</div></pre></td></tr></table></figure>

<p>O mesmo vale para funções. A diferença é que precisamos invocá-la antes de pegar o valor:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">sizes</span>()</div><div class="line">  15px 10px</div><div class="line">  </div><div class="line"><span class="function">sizes</span>()<span class="attr_selector">[1]</span> <span class="comment">// =&gt; 10px</span></div></pre></td></tr></table></figure>

<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p>Uma exceção para esses casos, é quando os valores de retorno são identificadores.</p>
<p>No exemplo abaixo, os valores de retorno podem se confundir com atribuições para propriedades:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">swap</span><span class="params">( a, b )</span></span></div><div class="line">  <span class="title">b</span> <span class="title">a</span></div><div class="line">  </div><div class="line"><span class="title">body</span></div><div class="line">  <span class="title">swap</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></div></pre></td></tr></table></figure>

<p>Se fizermos isso, tentando usar <code>swap</code> como <em>mixin</em>, temos como resultado:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">b</span>:<span class="value"> <span class="number">10</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>E se tentarmos usar como função, retornando um valor:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span></div><div class="line">  <span class="attribute">width</span> <span class="function">swap</span>( 10, 20 )</div></pre></td></tr></table></figure>

<p>Temos como resultado:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> b: <span class="number">10</span></span></span>;<span class="rule">;</span></div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Ou seja: <strong>Nada a ver, né meu!</strong></p>
<p>Para remover a ambiguidade, você pode usar parênteses, ou então a palavra-chave <code>return</code>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">swap</span><span class="params">( a, b )</span></span></div><div class="line">  <span class="params">( b a )</span></div><div class="line">  </div><div class="line"><span class="title">body</span></div><div class="line">  <span class="title">padding</span> <span class="title">swap</span><span class="params">( <span class="number">10</span>px, <span class="number">20</span>px )</span></div></pre></td></tr></table></figure>

<p>Que retorna:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">20px</span> <span class="number">10px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Ou ainda, usando <code>return</code>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">swap</span>( a, b )</div><div class="line">  <span class="keyword">return</span> b a</div><div class="line">  </div><div class="line">body</div><div class="line">  padding <span class="built_in">swap</span>( 10px, 20px )</div></pre></td></tr></table></figure>

<p>O resultado é o mesmo :)</p>
<h2 id="Funções_como_parãmetro">Funções como parãmetro</h2>
<p>Também é possível usar funções como parâmetros, para usar como um <em>callback</em>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">add</span>( <span class="operator">a</span>, b )</div><div class="line">  <span class="operator">a</span> + b</div><div class="line">  </div><div class="line">sub( <span class="operator">a</span>, b )</div><div class="line">  <span class="operator">a</span> - b</div><div class="line">  </div><div class="line">invoke( <span class="operator">a</span>, b, fn )</div><div class="line">  fn( <span class="operator">a</span>, b )</div><div class="line">  </div><div class="line">body</div><div class="line">  padding invoke( <span class="number">10</span>px, <span class="number">20</span>, <span class="built_in">add</span> )</div><div class="line">  margin invoke( <span class="number">8</span>px, <span class="number">5</span>, sub )</div></pre></td></tr></table></figure>

<p>Que vai compilar para:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">3px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>E isso é apenas o começo do que você pode fazer usando funções no <strong>Stylus</strong>! Para conhecer todas as possibilidades, visite a <a href="http://learnboost.github.io/stylus/docs/functions.html" target="_blank" rel="external">documentação oficial, na sessão de <em>functions</em></a> :D</p>
<p>Até o próximo!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/stylus-the-power-of-functions.png" alt=""></p>
<p>Funções são bastante parecidas com <em>mixins</em>, no <strong>Stylus</strong>. A grande diferença é que elas podem retornar valores! Vamos ver como elas funcionam? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="stylus" scheme="http://blog.da2k.com.br/tags/stylus/"/>
    
      <category term="pré-processadores" scheme="http://blog.da2k.com.br/tags/pre-processadores/"/>
    
      <category term="css" scheme="http://blog.da2k.com.br/categories/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS - float ou overflow?]]></title>
    <link href="http://blog.da2k.com.br/2015/02/25/css-float-ou-overflow/"/>
    <id>http://blog.da2k.com.br/2015/02/25/css-float-ou-overflow/</id>
    <published>2015-02-25T03:00:00.000Z</published>
    <updated>2015-03-21T23:23:25.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/float-vs-overflow.png" alt=""></p>
<p>Hoje, em CSS, temos basicamente duas formas de conter flutuação em CSS: com o próprio <code>float</code>, ou usando <code>overflow</code>. Qual a melhor forma? Qual a forma correta? Quando eu devo usar? Nesse artigo, veremos as vantagens e desvantagens dos dois modos! Vem comigo :D</p>
<a id="more"></a>

<h2 id="Simulando_o_problema">Simulando o problema</h2>
<p>É mais fácil <em>visualizar</em> o problema, já que estamos falando de CSS. Então, vamos escrever um pouco de código que eu vou explicando o que acontece :)</p>
<p>Crie um arquivo <code>index.html</code>, com o seguinte código:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Float ou Overflow<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://placehold.it/1x1"</span> <span class="attribute">width</span>=<span class="value">"200"</span> <span class="attribute">height</span>=<span class="value">"200"</span> <span class="attribute">alt</span>=<span class="value">""</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Cumque natus, corporis quae molestiae eum facilis mollitia temporibus expedita ipsam sequi culpa sunt, fugiat. Porro velit dolore quo, dolorem, quia earum nihil cumque inventore placeat vero ullam, neque ad quae, molestias deleniti. Quas facilis incidunt ipsa facere inventore impedit quae debitis?<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Um simples HTML, com uma div, que contém um parágrafo e uma imagem. Agora vamos estilizar para deixar tudo um pouco mais bonito. Pode usar o CSS abaixo no HTML mesmo, somente para exemplo. Coloque o código abaixo da tag <code>&lt;title&gt;</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="tag">div</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">15px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">&lt;/<span class="title">style</span>&gt;</span></div></pre></td></tr></table></figure>

<p>E temos o seguinte resultado:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/float-overflow1.png" alt=""></p>
<p>Olha que lindo! Nossa div com um fundo bastante exótico, a imagem, e o texto logo abaixo. Agora nós queremos posicionar nossa imagem do lado direito do texto. O que precisamos fazer? Isso mesmo, <strong>flutuá-la!</strong></p>
<p>Vamos então adicionar o estilo para flutuar a imagem. Coloque o código abaixo, logo após o CSS da <code>div</code>:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">img</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>E olha o que aconteceu:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/float-overflow2.png" alt=""></p>
<p>A imagem ficou pra fora do nosso box! Mas não é isso que queremos! Ela faz parte do box, e deve ficar dentro dele, respeitando o <code>padding</code> de 15px que eu coloquei no box. Temos duas formas de “resolver” isso.</p>
<h2 id="Overflow_para_conter_a_flutuação">Overflow para conter a flutuação</h2>
<p>Podemos usar <code>overflow</code> no container pai para conter a flutuação:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">div</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">15px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Na linha <code>3</code>, adicionamos um <code>overflow: hidden</code>, e agora, olhe o que aconteceu:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/float-overflow3.png" alt=""></p>
<p><em>Perfeito! Era exatamente o que queríamos! Já acabou?</em></p>
<p>Calma criança! Ficou exatamente como esperávamos, NESSE CASO. Agora imagine que o designer que fez o layout é todo descolado, e fez um <em>badge</em> que vai ficar posicionado no canto superior esquerdo, um pouco para fora do box.</p>
<p>Vamos adicionar o <em>badge</em> no nosso código:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"badge"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://placehold.it/1x1"</span> <span class="attribute">width</span>=<span class="value">"200"</span> <span class="attribute">height</span>=<span class="value">"200"</span> <span class="attribute">alt</span>=<span class="value">""</span> /&gt;</span></div><div class="line">  ...</div></pre></td></tr></table></figure>

<p>E vamos posicioná-lo no canto superior esquerdo do box:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">div</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">15px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line">  </div><div class="line"><span class="class">.badge</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> purple</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> -<span class="number">25px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> -<span class="number">25px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Deixamos a <code>div</code> com posicionamento relative (linha <code>5</code>), para que o <em>badge</em> não se perca, e fique posicionado absolutamente, mas sempre relativo à div.</p>
<p>Olha o resultado que coisa mais fofa:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/float-overflow4.png" alt=""></p>
<p>Nosso <em>badge</em> ficou lá no canto, mas só apareceu 1/4 dele! Cadê o resto?</p>
<p>O <em>overflow</em> conteve a flutuação, mas, em conpensação, impede que qualquer filho do container ao qual foi aplicado o overflow, apareça fora da área delimitada =/</p>
<p><strong>Resultado: </strong></p>
<p>Usar <code>overflow</code> resolve o problema de conter flutuação? Sim, em partes. A menos que vocẽ precise que, algo dentro do box, fique um pouco para fora.<br>É a solução correta? Não.</p>
<h2 id="Usando_float_para_conter_a_flutuação">Usando float para conter a flutuação</h2>
<p>Agora vamos ver como fazer o mesmo, mas usando <code>float</code>. Vamos remover o <code>overflow</code> da div e colocar um <code>float: left</code>:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">div</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">15px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>E o resultado:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/float-overflow5.png" alt=""></p>
<p>Ótimo, coisa linda! Mas perae, tem um problema… Nosso box não ocupou toda a largura da tela. Como ele está flutuado e não tem <code>width</code> definido, a largura dele será baseada no tamanho dos itens internos.</p>
<p><em>Ah, mas isso é fácil de resolver: só colocar um <code>width: 100%</code> na div!</em></p>
<p>Vamos fazer isso então:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">div</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">15px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Como ficou?</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/float-overflow6.png" alt=""></p>
<p>Olhe o que aconteceu: ficou “quase” da forma como queríamos. O problema foi que, como nosso box tem um <code>padding</code> de 15px em cada lado (30px na vertical, e 30px na horizontal), os <code>100%</code> da largura foram somados aos 30px horizontais! Ficamos com um box que tem 100% + 30px de largura!</p>
<p><em>Tem como resolver isso de outra forma?</em></p>
<p>Existe uma propriedade chamada <code>box-sizing</code>, que funciona no ie8+. Usando o valor <code>border-box</code>, nós fazemos com que, ao invés de somar os valores de <code>padding</code> do box, ele seja aplicado à largura do mesmo! Vamos aproveitar e aplicar à todos os elementos. Como é uma única propriedade, não há problema em usar o <code>*</code> nesse caso:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-moz-box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>E olha o resultado:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/float-overflow7.png" alt=""></p>
<p>Agora sim, ficou exatamente como eu esperava! Mas eu precisei usar outra propriedade além do <code>float</code>, e ainda usar o <code>width: 100%</code> para ficar correto.</p>
<p><strong>Resultado: </strong></p>
<p>Usar <code>float</code> resolve o problema de conter flutuação? Não sozinho, precisa do box-sizing. Com o box-sizing sim.<br>É a solução correta? Não. Se estamos flutuando para direita ou esquerda, não faz muito sentido colocar width: 100%.</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Conclusão">Conclusão</h2>
<p>Não existe uma solução “correta” para isso. Temos essas duas abordagens que estão disponíveis. Podemos usar qualquer uma delas. </p>
<p>Em minha opinião, a que melhor funciona é a do float com box-sizing. Apesar de você precisar flutuar sempre os containers principais, eu penso que é muito mais fácil fazer isso do que, depois do layout todo pronto, o designer colocar uma nova feature, onde é necessário conter a flutuação, e você ter que sair flutuando loucamente tudo o que vir pela frente.</p>
<p>Se flutuar somente os containers principais, o que vai ficar dentro deles é muito mais facilmente controlável :)</p>
<p>A solução ideal para isso, na verdade, seria usar <code>flexbox</code>. Se no seu projeto você não precisa <a href="http://caniuse.com/#feat=flexbox" target="_blank" rel="external">se preocupar com o IE</a>, vocẽ pode usá-lo hoje mesmo. Chris Coyier, do CSS Tricks, escreveu um <a href="http://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">excelente artigo</a> falando praticamente tudo sobre Flexbox. Recomendo a leitura ;)</p>
<p>E você: tem alguma técnica diferente para conter a flutuação? Usa alguma das citadas acima Já havia passado por isso, mas não sabia como resolver? Compartilhe conosco nos comentários! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/float-vs-overflow.png" alt=""></p>
<p>Hoje, em CSS, temos basicamente duas formas de conter flutuação em CSS: com o próprio <code>float</code>, ou usando <code>overflow</code>. Qual a melhor forma? Qual a forma correta? Quando eu devo usar? Nesse artigo, veremos as vantagens e desvantagens dos dois modos! Vem comigo :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="css" scheme="http://blog.da2k.com.br/categories/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress - Criando um formulário de contato sem plugin - Parte 2]]></title>
    <link href="http://blog.da2k.com.br/2015/02/24/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-2/"/>
    <id>http://blog.da2k.com.br/2015/02/24/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-2/</id>
    <published>2015-02-24T03:00:00.000Z</published>
    <updated>2015-03-23T00:00:38.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-form-without-plugin2.png" alt=""></p>
<p>No <a href="http://blog.da2k.com.br/2015/02/22/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-1/" target="_blank" rel="external">post anterior</a>, montamos nossa <em>view</em>, com os campos do formulário, e deixamos preparada a interface que irá receber o retorno do envio.<br>Hoje nós veremos como a <em>view</em> receberá as informações que ela precisa, mantendo a ordem dos nossos arquivos :D</p>
<a id="more"></a>

<h2 id="Criando_nosso_controller">Criando nosso controller</h2>
<p>Primeiramente, como temos uma página nova, vamos criar um controller que irá gerenciar todas as informações para essa página. No momento, temos só um formulário de contato. Mas poderíamos ter informações de contato, endereço, etc., em uma sidebar. Então já vamos deixar nossa aplicação escalável, separando corretamente as responsabilidades.</p>
<p>Crie um novo arquivo chamado <code>controller-contact.php</code> em <code>functions/controllers</code>, e vamos gerar o código padrão para o nosso <em>controller</em>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/../security.php'</span>;</div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller_Contact</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>{</div><div class="line">        add_filter( <span class="string">'send_contact_form'</span>, <span class="keyword">array</span>( <span class="keyword">new</span> Service_Contact_Form, <span class="string">'send_contact_form'</span> ) );</div><div class="line">    }</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">new</span> Controller_Contact;</div></pre></td></tr></table></figure>

<p>Usamos a mesma base utilizada para criar nosso <code>controller-single.php</code>. </p>
<p><em>Hey, o que é aquele <code>new Service_Contact_Form</code>?</em></p>
<p>Como eu disse acima, vamos separar as responsabilidades das coisas. Se o <em>controller</em> ficar responsável por tratar os dados e exibí-los por toda a nossa página, quanto mais informações tivermos, maior ficará nosso arquivo, e pior para dar manutenção. Então vamos utilizar <em>services</em> que nos ajudarão a organizar o código.</p>
<p>Os <em>services</em> basicamente servirão para tratar todas a parte “bruta” do código. Cada <em>service</em> terá uma única responsabilidade. Nesse caso, o <code>Service_Contact_Form</code> servirá somente para tratar os dados de envio do nosso formulário. Se houver a necessidade de exibir informações de contato na sidebar, então nós iremos criar outro <em>service</em> para isso.</p>
<p>Os <code>controllers</code> podem chamar quantos <em>services</em> forem necessários. Por isso nós iremos criar um <em>controller</em> por página, e quantos services forem necessários, para cada <em>controller</em>. </p>
<p>Agora, explicando a chamada acima:</p>
<p>Você deve lembrar que, no artigo que falamos sobre <a href="http://blog.da2k.com.br/2015/02/11/wordpress-controlando-a-exibicao-dos-dados/" target="_blank" rel="external">controlar a exibição dos dados</a> na nossa <em>single</em>, usamos um <code>array</code>, e passamos como primeiro parâmetro o <code>$this</code>, que é a referência para o objeto instanciado à partir daquela classe. Agora, nós estamos usando outra classe, chamada <code>Service_Contact_Form</code>. Por isso, instanciamos ela, e passamos como segundo parâmetro o método que nós esperamos que ela nos retorne os dados, para que sejam enviados à view, no momento em que o <em>hook</em> <code>send_contact_form</code> for ativado.</p>
<p>Esse <em>hook</em> está no início da nossa <em>view</em>, como vimos no <a href="http://blog.da2k.com.br/2015/02/22/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-1/" target="_blank" rel="external">post anterior</a>.</p>
<p>Ficou claro até aqui? Vamos seguir então :)</p>
<p>Agora vamos criar nosso <em>service</em>. Crie um diretório <code>service</code> dentro do diretório <code>functions/</code>, e, dentro desse diretório, crie o arquivo <code>service-contact-form.php</code>.</p>
<p>Antes de continuarmos, precisamos incluir nossos arquivos para que eles possam ser utilizados na nossa aplicação. Até aqui, o início do nosso <code>functions.php</code> está assim:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/security.php'</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/controllers/controller-single.php'</span>;</div></pre></td></tr></table></figure>

<p>Vamos adicionar nosso <em>controller</em> da página de contato e também o <em>service</em>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/security.php'</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/services/service-contact-form.php'</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/controllers/controller-single.php'</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/controllers/controller-contact.php'</span>;</div></pre></td></tr></table></figure>

<p>É muito importante a ordem que você inclui suas classes. No nosso caso, vamos sempre chamar os <em>services</em> <strong>antes</strong> dos <em>controllers</em>. Não é necessário manter uma ordem entre os <em>services</em>, ou entre os <em>controllers</em>, pois um <em>service</em> nunca consultará outro <em>service, igualmente um _controller</em> nunca consultará outro <em>controller</em>.</p>
<p>Agora, vamos começar a criar nosso <em>service</em>. Em <code>functions/services/service-contact-form.php</code>, adicione o seguinte código:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/../security.php'</span>;</div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service_Contact_Form</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send_contact_form</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> (object) <span class="keyword">array</span>(</div><div class="line">            <span class="string">'status'</span> =&gt; <span class="string">'success'</span>,</div><div class="line">            <span class="string">'message'</span> =&gt; <span class="string">'Seu e-mail foi enviado com sucesso!'</span></div><div class="line">        );</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Antes de qualquer coisa, precisamos testar se tudo funciona, então, por enquanto, vamos somente retornar os dados necessários à nossa interface.</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<p><em>O que tem de diferente nesse arquivo?</em> </p>
<p>Nosso controller espera um método chamado <code>send_contact_form</code>, dentro da classe <code>Service_Contact_Form</code>, para enviar os dados à nossa <em>view</em>.</p>
<p>Na <em>view</em>, nós esperamos que a resposta seja um objeto, com as propriedades <code>status</code> e <code>message</code>. Por isso estamos retornando esse valor no nosso método.</p>
<p><em>Por que aquele <code>(object)</code> ali?</em></p>
<p>Estava esperando você perguntar! :)</p>
<p>Como você pode perceber, nosso método retorna um <code>array</code>, mas nossa <em>view</em> espera que o retorno seja um objeto. Além da classe <code>StdClass()</code>, que instancia uma nova classe vazia em PHP, para que você crie seus próprios métodos e propriedades rapidamente, podemos usar esse formato para converter um <code>array</code> para objeto.</p>
<p>Dessa forma, poderemos acessar corretamente esses dados na <em>view</em>, com:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$post_response</span><span class="variable">-&gt;status</span>; <span class="comment">// "success"</span></div><div class="line"><span class="variable">$post_response</span><span class="variable">-&gt;message</span>; <span class="comment">// "Seu e-mail foi enviado com sucesso!"</span></div></pre></td></tr></table></figure>

<p>Agora é o momento de você usar a sua criatividade e usar CSS para estilizar a mensagem, para que ela fique “apresentável” ao usuário final :) </p>
<p>Teste mensagens com muito texto, com pouco texto, mude o status para <code>error</code> para saber como deve ser mostrada uma mensagem de erro. Nos próximos artigos continuaremos nossa saga para tratar os dados inputados pelo usuário, tratar algumas regras de segurança, para enfim fazer o envio do e-mail! Não perca os próximos episódios :D</p>
<p>Até lá!</p>
<p>Ficou alguma dúvida? Comente! :)</p>
<blockquote>

<p><strong>Link para o índice dessa série: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/02/22/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-1/" target="_blank" rel="external">http://blog.da2k.com.br/2015/02/22/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-1/</a></p>
<p><strong> Próximo post:</strong><br><a href="http://blog.da2k.com.br/2015/02/28/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-3/" target="_blank" rel="external">http://blog.da2k.com.br/2015/02/28/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-3/</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-form-without-plugin2.png" alt=""></p>
<p>No <a href="http://blog.da2k.com.br/2015/02/22/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-1/" target="_blank" rel="external">post anterior</a>, montamos nossa <em>view</em>, com os campos do formulário, e deixamos preparada a interface que irá receber o retorno do envio.<br>Hoje nós veremos como a <em>view</em> receberá as informações que ela precisa, mantendo a ordem dos nossos arquivos :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress - Criando um formulário de contato sem plugin - Parte 1]]></title>
    <link href="http://blog.da2k.com.br/2015/02/22/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-1/"/>
    <id>http://blog.da2k.com.br/2015/02/22/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-1/</id>
    <published>2015-02-22T13:15:00.000Z</published>
    <updated>2015-03-25T10:05:05.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-form-without-plugin.png" alt=""></p>
<p>Sempre que se pensa em formulários com <strong>WordPress</strong>, a primeira coisa que vem à mente é: <em>vou usar um plugin!</em> E realmente, existem plugins muito bons para fazer isso. Mas, em alguns momentos, você precisa de um controle maior no seu código. </p>
<p><em>Mas é possível criar formulários “na mão”, de forma fácil?</em><br>Claro que sim! O que não é fácil de fazer com <strong>WordPress</strong>? ;)<br>Vem comigo que eu te mostro como faz!</p>
<a id="more"></a>

<p>Nessa primeira parte, vamos montar nossa <em>view</em>, o template onde ficará o formulário de contato.</p>
<p>Temos várias formas de fazer isso no WordPress, mas, inicialmente, vamos fazer da forma tradicional: no Painel, crie um nova página chamada <strong>Contato</strong>, que tenha como slug <strong>contato</strong>. Então, crie na raiz do tema um arquivo chamado <code>page-contato.php</code>.</p>
<p>Lembrando que você pode acompanhar as alterações do arquivos dessa série “Criando temas com WordPress”, através <a href="https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br" target="_blank" rel="external">deste repositório</a>, no <strong>Github</strong>.</p>
<p>Agora, o código da <code>page-contato.php</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span></div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/security.php'</span>;</div><div class="line">get_header();</div><div class="line">the_post();</div><div class="line"><span class="variable">$post_response</span> = apply_filters( <span class="string">'send_contact_form'</span>, <span class="keyword">false</span> );</div><div class="line"><span class="preprocessor">?&gt;</span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">if</span>( <span class="variable">$post_response</span> ) : <span class="preprocessor">?&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"alert alert-&lt;?php echo $post_response-&gt;status ?&gt;"</span>&gt;</span></div><div class="line">    <span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$post_response</span><span class="variable">-&gt;message</span> <span class="preprocessor">?&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">endif</span> <span class="preprocessor">?&gt;</span></span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"&lt;?php echo get_permalink() ?&gt;"</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"field-name"</span>&gt;</span>Nome<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"field_name"</span> <span class="attribute">id</span>=<span class="value">"field-name"</span> <span class="attribute">placeholder</span>=<span class="value">"Nome"</span> <span class="attribute">required</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"field-email"</span>&gt;</span>E-mail<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"email"</span> <span class="attribute">name</span>=<span class="value">"field_email"</span> <span class="attribute">id</span>=<span class="value">"field-email"</span> <span class="attribute">placeholder</span>=<span class="value">"E-mail"</span> <span class="attribute">required</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"fake-field"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"field-mail"</span>&gt;</span>NÃO preencha esse campo, ou seu e-mail não será enviado<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"email"</span> <span class="attribute">name</span>=<span class="value">"field_mail"</span> <span class="attribute">id</span>=<span class="value">"field-mail"</span> <span class="attribute">placeholder</span>=<span class="value">"NÃO preencha esse campo, ou seu e-mail não será enviado"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"field-subject"</span>&gt;</span>Assunto<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"field_subject"</span> <span class="attribute">id</span>=<span class="value">"field-subject"</span> <span class="attribute">placeholder</span>=<span class="value">"Assunto"</span> <span class="attribute">class</span>=<span class="value">"[ input-text ] contact-form__list-item__input"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"field-message"</span>&gt;</span>Mensagem<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">name</span>=<span class="value">"field_message"</span> <span class="attribute">id</span>=<span class="value">"field-message"</span> <span class="attribute">cols</span>=<span class="value">"30"</span> <span class="attribute">rows</span>=<span class="value">"10"</span> <span class="attribute">placeholder</span>=<span class="value">"Mensagem"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"submit"</span>&gt;</span>Enviar<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> get_footer() <span class="preprocessor">?&gt;</span></span></div></pre></td></tr></table></figure>

<p>Deixei o mínimo de código possível para que um formulário de contato possa funcionar corretamente. Obviamente que, quando você for fazer, vai utilizar classes para estilizar os campos. Como esse não é o foco do post, vamos deixar tão simples quanto possível :)</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Explicando_o_código">Explicando o código</h2>
<p>Até a linha <code>4</code>, nada que não tenhamos visto até aqui: adicionamos o arquivo <code>security.php</code>, que vai impedir que nosso arquivo seja acesso diretamente, adicionamos o <code>header</code> padrão do nosso tema, e chamamos a função <code>the_post()</code>, que vai nos permitir usar as <em>Template Tags</em>, trazendo resultados específicos para essa página de contato.</p>
<p>Na linha <code>5</code>, a variável <code>$post_response</code> vai nos retornar o resultado do envio do e-mail. Lembra como fizemos nos posts anteriores? Primeiro, definimos a interface da nossa <em>view</em>, depois, fazemos o código que resopnde à essa interface :)</p>
<p>O <code>$post_response</code> será um objeto que nos retornará o <em>status</em> do envio: <em>success</em> ou <em>error</em>. Com isso, podemos mostrar ao usuário uma mensagem personalizada, e estilizada com uma cor que defina o <em>status</em>. Posso mostrar a mensagem em verde, por exemplo, para sucesso, e vermelho para erro. </p>
<p>Por isso eu deixei, na linha <code>9</code>, uma classe na <code>div</code>. O status será concatenado à classe <code>alert</code>. Então podemos estilizar essa mensagem, baseando-se nas classes <code>alert-success</code> e <code>alert-error</code>.</p>
<p>Na linha <code>10</code>, será mostrada a mensagem de sucesso ou erro.</p>
<p>Mas antes disso, na linha <code>8</code>, verificamos se <code>$post_response</code> tem a mensagem e o status. Se não houver (ou seja, se retornar <code>false</code>), a <code>div</code> com a mensagem nem é mostrada. Nós faremos com que <code>$post_response</code> seja <code>true</code> somente se o formulário for enviado :)</p>
<p>Na linha <code>14</code>, colocamos como <code>action</code> do nosso formulário o link dessa página mesmo. Ou seja: ao submeter o formulário, o usuário será redirecionado para essa mesma página, com a diferença que ele verá a mensagem de erro ou sucesso após o <em>submit</em>.</p>
<p>Da linha <code>15</code> até a linha <code>37</code>, adicionamos os campos do nosso formulário. Teremos 4 campos principais: <strong>nome</strong>, <strong>email</strong>, <strong>assunto</strong> e <strong>mensagem</strong>. Além desses, criamos um campo <em>fake</em>, para nos livrarmos de <a href="http://blog.da2k.com.br/2015/02/16/acabando-com-spam-nos-seus-formularios/" target="_blank" rel="external">robôs que enviam SPAM através de formulários.</a></p>
<p>Nossa <em>view</em> está pronta! Nos próximos artigos, veremos como criar o código que vai tratar os nossos dados e submeter esse formulário!</p>
<p>Até lá :D</p>
<blockquote>

<p><strong>Link para o índice dessa série: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/02/11/wordpress-controlando-a-exibicao-dos-dados/" target="_blank" rel="external">http://blog.da2k.com.br/2015/02/11/wordpress-controlando-a-exibicao-dos-dados/</a></p>
<p><strong> Próximo post:</strong><br><a href="http://blog.da2k.com.br/2015/02/24/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-2/" target="_blank" rel="external">http://blog.da2k.com.br/2015/02/24/wordpress-criando-um-formulario-de-contato-sem-plugin-parte-2/</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-form-without-plugin.png" alt=""></p>
<p>Sempre que se pensa em formulários com <strong>WordPress</strong>, a primeira coisa que vem à mente é: <em>vou usar um plugin!</em> E realmente, existem plugins muito bons para fazer isso. Mas, em alguns momentos, você precisa de um controle maior no seu código. </p>
<p><em>Mas é possível criar formulários “na mão”, de forma fácil?</em><br>Claro que sim! O que não é fácil de fazer com <strong>WordPress</strong>? ;)<br>Vem comigo que eu te mostro como faz!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sourcemaps - Debugando JS e CSS minificados]]></title>
    <link href="http://blog.da2k.com.br/2015/02/21/sourcemaps-debugando-js-e-css-minificados/"/>
    <id>http://blog.da2k.com.br/2015/02/21/sourcemaps-debugando-js-e-css-minificados/</id>
    <published>2015-02-21T02:00:00.000Z</published>
    <updated>2015-02-22T14:45:49.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/sourcemaps.jpg" alt=""></p>
<p>Sabe quando você está usando uma lib qualquer (jQuery, bootstrap, etc), e abre o console do seu navegador, você percebe uma mensagem de erro 404, pois o browser está tentando baixar um arquivo <code>jquery.js.map</code> ou <code>bootstrap.css.map</code>? <em>Afinal de contas: pra que serve esse arquivo <code>.map</code>? Algum dia na MINHA VIDA eu vou precisar dele?</em> </p>
<p>Vem descobrir! ;) </p>
<a id="more"></a>

<h2 id="O_problema">O problema</h2>
<p>É praticamente impossível debugar JS e CSS minificados. Sempre que acontece um erro, e você precisa saber qual a linha de referência de um comando em um arquivo, você “desminifica” o CSS ou JS, e o inclui na sua aplicação para debugar.</p>
<h2 id="Então_qual_é_a_solução?">Então qual é a solução?</h2>
<p><strong>Sourcemaps</strong>! Sim, aquele arquivo <code>.map</code> que fica dando erro 404 no seu console é que vai resolver seu problema! :D</p>
<h2 id="Como_funcionam_os_sourcemaps">Como funcionam os sourcemaps</h2>
<p>Quando você tem um código minificado, e adiciona a ele uma referência a um <em>sourcemap</em>, o <em>sourcemap</em> faz uma varredura no arquivo, e gera todas as referências a número de linha, nomes de variáveis e funções, etc., para que você possa debugar no arquivo “desminificado”.</p>
<p>Complicado? Com um exemplo prático vai ficar mais fácil de entender :D</p>
<h2 id="Criando_a_estrutura_de_arquivos">Criando a estrutura de arquivos</h2>
<p>Vamos criar a seguinte estrutura para o nosso teste com <strong>sourcemaps</strong>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── gulpfile.js</div><div class="line">├── index.html</div><div class="line">├── package.json</div><div class="line">├── public</div><div class="line">└── src</div><div class="line">    └── js</div><div class="line">        ├── app.js</div><div class="line">        └── controllers</div><div class="line">            └── controller-home.js</div></pre></td></tr></table></figure>

<p>No diretório <code>src</code> ficarão nossos fontes, e no <code>public</code>, os arquivos concatenados e minificados.</p>
<p>Vamos utilizar o <strong>Gulp</strong> para fazer as tarefas de concatenação, minificação e geração do <strong>sourcemaps</strong>. Se você ainda não conhece o <strong>Gulp</strong>, e quer saber mais sobre, acesse: <a href="http://blog.da2k.com.br/tags/gulpjs/" target="_blank" rel="external">http://blog.da2k.com.br/tags/gulpjs/</a></p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Instalando_os_plugins_do_Gulp_necessários">Instalando os plugins do Gulp necessários</h2>
<p>Instale os seguintes plugins:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp gulp-concat gulp-uglify gulp-sourcemaps gulp-load-plugins</div></pre></td></tr></table></figure>

<h2 id="Chamando_os_arquivos_na_index">Chamando os arquivos na index</h2>
<p>Agora precisamos montar nossa <code>index.html</code> para receber o arquivo JS minificado, para que possamos debugá-lo! A index deve ter esse código:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Sourcemaps<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://even.tc/curso-javascript-ninja"</span> <span class="attribute">data-js</span>=<span class="value">"link"</span>&gt;</span></div><div class="line">    Curso Javascript Ninja!</div><div class="line">  <span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"public/js/main.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Bem básico! Só para que possamos ter o JS incluído :D </p>
<h2 id="Códigos_para_os_JS">Códigos para os JS</h2>
<p>Vamos agora colocar um pouco de código nos nossos arquivos JS. Primeiro o <code>main.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( Module, undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">app</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    </div><div class="line">    $public.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">      Module.controllerHome.init();</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  app().init();</div><div class="line">})( <span class="built_in">window</span>.Module );</div></pre></td></tr></table></figure>

<p>Depois, o <code>controllers/controller-home.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( win, doc, undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">controllerHome</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    <span class="keyword">var</span> $private = {};</div><div class="line">    </div><div class="line">    $public.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">      $private.initEvents();</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.initEvents = <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">var</span> $link = doc.querySelector( <span class="string">'[data-js="link"]'</span> );</div><div class="line">      $link.addEventListener( <span class="string">'click'</span>, $private.handleClickLink, <span class="literal">false</span> );</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleClickLink = <span class="function"><span class="keyword">function</span> <span class="title">handleClickLink</span><span class="params">( e )</span> </span>{</div><div class="line">      e.preventDefault();</div><div class="line">      Module.redirectService( <span class="keyword">this</span>.href );</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="built_in">window</span>.Module = <span class="built_in">window</span>.Module || {};</div><div class="line">  <span class="built_in">window</span>.Module.controllerHome = controllerHome();</div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>E então, vamos configurar nosso <strong>Gulpfile</strong>.</p>
<h2 id="Configurando_Gulpfile-js">Configurando Gulpfile.js</h2>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> g = <span class="built_in">require</span>( <span class="string">'gulp-load-plugins'</span> )();</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src([</div><div class="line">    <span class="string">'src/js/controllers/**/*.js'</span>,</div><div class="line">    <span class="string">'src/js/app.js'</span></div><div class="line">  ])</div><div class="line">  .pipe( g.concat( <span class="string">'main.js'</span> ) )</div><div class="line">  .pipe( g.uglify() )</div><div class="line">  .pipe( gulp.dest( <span class="string">'public/js'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Esse <code>gulpfile.js</code> vai concatenar e minificar todos os JS em um único arquivo. O <code>gulp-load-plugins</code> vai carregar todos os plugins instalados que tem o prefixo <code>gulp-*</code>, e vai colocar em um objeto, que nós chamamos de <code>g</code>. O padrão para nome dos métodos é remover o prefixo <code>gulp-</code>, remover o traço e usar <em>camelCase</em>. </p>
<p>Por exemplo: o plugin <em>gulp-uglify</em> pode ser chamado com <code>g.uglify()</code>. Se estivéssemos usando CSS aqui, e adicionássemos o plugin <code>gulp-minify-css</code>, ele poderia ser chamado com o comando <code>g.minifyCss()</code>.</p>
<p>Executando o comando <code>gulp</code> no terminal, os arquivos serão concatenados, minificados, e colocados nos diretório <code>public/js</code>.</p>
<p>Acessando nossa <code>index.html</code>, já podemos começar a ver como estão os arquivos. Antes de qualquer coisa, abra o <em>console</em> do seu navegador e então, clique no link. Será mostrado o seguinte erro:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/js-error.png" alt=""></p>
<p>Vamos então debugá-lo, clicando no link <code>main.js</code> indicado:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/js-error-source.png" alt=""></p>
<p><em>Ops! Como faz pra achar o erro agora? O arquivo está minificado!</em></p>
<p>É hora de ver como funcionam os <strong>sourcemaps</strong>! Vamos modificar um pouco nosso <strong>Gulpfile</strong>, e adicionar o suporte aos <strong>sourcemaps</strong> no nosso JS:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src([</div><div class="line">    <span class="string">'src/js/controllers/**/*.js'</span>,</div><div class="line">    <span class="string">'src/js/app.js'</span></div><div class="line">  ])</div><div class="line">  .pipe( g.sourcemaps.init() )</div><div class="line">  .pipe( g.concat( <span class="string">'main.js'</span> ) )</div><div class="line">  .pipe( g.uglify() )</div><div class="line">  .pipe( g.sourcemaps.write( <span class="string">'.'</span> ) )</div><div class="line">  .pipe( gulp.dest( <span class="string">'public/js'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Na linha <code>6</code>, logo após adicionar nossos <em>source files</em>, nós iniciamos o <strong>sourcemaps</strong>, para que ele tenha a referência de todos os arquivos. Após isso, concatenamos e minificamos o arquivo e, antes de gravá-lo em disco, executamos o método <code>write</code> do <code>sourcemaps</code> para que o arquivo <code>main.js.map</code> seja salvo no mesmo local do <code>main.js</code>.</p>
<p>Os plugins que ficam entre o <code>sourcemaps.init()</code> e <code>sourcemaps.write()</code> devem ter suporte para <code>sourcemaps</code>. Para ver quais são todos os plugins do <strong>Gulp</strong> suportados, acesse <a href="https://github.com/floridoo/gulp-sourcemaps/wiki/Plugins-with-gulp-sourcemaps-support" target="_blank" rel="external">esse link</a>.</p>
<p>Feito isso, vamos gerar novamente nosso arquivo minificado, mas dessa vez, com o arquivo <code>.map</code>. Execute <code>gulp</code> no seu terminal.</p>
<p>Com o comando executado, se você abrir o diretório <code>public/js</code>, verá que o arquivo <code>main.js.map</code> está lá! E abrindo o <code>main.js</code>, você pode ver, no final dele, um comentário com a referência ao seu <code>.map</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//# sourceMappingURL=main.js.map</span></div></pre></td></tr></table></figure>

<p>Agora, recarregue a <code>index.html</code>, e clique no link novamente. Vai continuar dando o mesmo erro. Mas perae, agora a referência de arquivo mudou:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/error-js-sourcemaps-controllerjs.png" alt=""></p>
<p>O erro apontou para o arquivo <code>controller-home.js</code>! E na linha <code>19</code>, exatamente onde acontece o erro! :D</p>
<p>Isso acontece porque o <code>sourcemaps</code> guardou a referência desse arquivo, então ele sabe exatamente onde aconteceu o erro :D</p>
<p>Agora, clique no link com o nome do arquivo, e veja a mágica na aba <em>Sources</em>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/error-js-sourcemaps-line19.png" alt=""></p>
<p>Agora chega de sofrer para debugar códigos :D</p>
<p>Lembrando que isso é uma feature do browser, e você pode desabilitá-la a qualquer momento, se não tiver o arquivo <code>.map</code> de alguma lib que está dando erro 404 na sua aplicação. No Chrome, você pode clicar na <strong>Engrenagem</strong>, que aparece na <em>Dev Tools</em>, e desmarcar a opção <strong>Enable Javascript source maps</strong>.</p>
<p>Chega por hoje! Amanhã tem mais :D</p>
<p>Ficou com alguma dúvida? Comente!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/sourcemaps.jpg" alt=""></p>
<p>Sabe quando você está usando uma lib qualquer (jQuery, bootstrap, etc), e abre o console do seu navegador, você percebe uma mensagem de erro 404, pois o browser está tentando baixar um arquivo <code>jquery.js.map</code> ou <code>bootstrap.css.map</code>? <em>Afinal de contas: pra que serve esse arquivo <code>.map</code>? Algum dia na MINHA VIDA eu vou precisar dele?</em> </p>
<p>Vem descobrir! ;) </p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="sourcemaps" scheme="http://blog.da2k.com.br/tags/sourcemaps/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Os segredos da IIFE]]></title>
    <link href="http://blog.da2k.com.br/2015/02/20/os-segredos-da-iife/"/>
    <id>http://blog.da2k.com.br/2015/02/20/os-segredos-da-iife/</id>
    <published>2015-02-20T02:00:00.000Z</published>
    <updated>2015-02-28T19:52:08.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/iife.png" alt=""></p>
<p>Quando uma <em>função imediata</em> é invocada, muita coisa pode estar acontecendo por trás dessa chamada. Quer descobrir o que é? Então me acompanhe na leitura :D</p>
<a id="more"></a>

<p>Pra quem não conhece, a <em>IIFE</em> ou <em>Imediately Invoked Function Expression</em> (Expressão de Função Invocada Imediatamente), faz exatamente isso: no momento em que ela é interpretada, ela é imediatamente invocada, para que o seu conteúdo seja executado!</p>
<p><em>E porque é tão importante usar IIFE?</em></p>
<h2 id="Formato_da_IIFE">Formato da IIFE</h2>
<p>Antes de qualquer coisa, vou mostrar como se utiliza uma <strong>IIFE</strong>. Para uma função simples, você pode invocá-la da seguinte maneira:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'hi!'</span>;</div><div class="line">}</div><div class="line">  </div><div class="line">sayHi();</div></pre></td></tr></table></figure>

<p>Quando você cria uma função, ela não faz nada até que seja invocada. Quando criamos a função <code>sayHi()</code>, ela só vai responder com um <code>&quot;hi!&quot;</code> quando a invocarmos! Na linha <code>5</code> do código acima, nós estamos usando os parênteses <code>()</code> para invocar a função. Quando fazemos isso, nos é retornado a string <code>hi!</code>.</p>
<p>Ou seja, essa função precisa de um momento específico para ser invocada.</p>
<p>A <strong>IIFE</strong> é invocada imediatamente. Mas para que façamos a invocação de uma função imediata, precisamos transformá-la em uma expressão. Nesse caso, vamos utilizar os parênteses para transformar a função em uma expressão, e depois usar novamente os parênteses para invocá-la:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( win, undefined )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'hi!'</span>;</div><div class="line">})( <span class="built_in">window</span> );</div></pre></td></tr></table></figure>

<p>Essa é uma <strong>IIFE</strong>! É uma função anônima, logo, ela não poderia ser invocada, pois não tem um nome. Mas quando a transformamos em uma expressão, podemos invocá-la assim que ela é interpretada. Se executar esse código no seu console, você verá como resultado, a string <code>&quot;hi!&quot;</code>!</p>
<p>Você pode ler <a href="http://blog.da2k.com.br/2015/01/30/javascript-como-invocar-funcoes/" target="_blank" rel="external">esse post</a> se tiver interesse em saber mais sobre invocações de funções :)</p>
<p><em>Mas porque eu usaria uma <strong>IIFE</strong>? E o ponto-e-vírgula no ínicio? E aqueles parâmetros? E porque o <code>undefined</code> como parâmetro?</em></p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="Porque_usar_IIFE">Porque usar IIFE</h2>
<p>Escopo. O Javascript tem um problema bastante grave, que é a questão do escopo. Tudo o que você declara fora de uma função, faz parte do escopo global. Algumas linguagens colocam escopo a partir de blocos (<code>if</code>, <code>while</code>, <code>for</code>, etc). Mas em Javascript, se você declarar uma variável dentro de um <code>if</code>, você ainda será capaz de consultar o seu valor, pois o escopo é definido por um bloco de <strong>função</strong>.</p>
<p>Então, o motivo de usar uma <strong>IIFE</strong> é para que o seu código não fique sujando o escopo global, e evitar que suas variáveis possam colidir com outras de mesmo nome, que estão no mesmo escopo.</p>
<p>Criando uma função, a função ou variável criada ali dentro (utilizando o <code>var</code>), fará parte do escopo <strong>local</strong>, e não poderá ser acessada de fora, a não ser que, explicitamente, você a exporte.</p>
<h2 id="Ponto-e-vírgula_no_início_da_IIFE">Ponto-e-vírgula no início da IIFE</h2>
<p>O ponto-e-vírgula no início da <strong>IIFE</strong> é usado como segurança. Como vocẽ deve saber, você precisa colocar um ponto-e-vírgula sempre ao final de cada expressão. Mas ele não é obrigatório.</p>
<p>Então, imagine você concatenando todos os seus scripts, junto com as libs de terceiros que você usa. E imagine que uma lib qualquer tem, na última linha do seu código, a seguinte expressão:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export = service</div></pre></td></tr></table></figure>

<p>Sem colocar o ponto-e-vírgula no final. Quando você chamar a sua <strong>IIFE</strong> sem o ponto-e-vírgula no início, a sua expressão vai juntar com o <code>service</code>, fazendo-o se transformar em uma função, e causando um efeito colateral indesejado:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export = service(<span class="function"><span class="keyword">function</span><span class="params">( win, undefined )</span> </span>{</div><div class="line">  <span class="comment">// ...</span></div><div class="line">})( <span class="built_in">window</span> );</div></pre></td></tr></table></figure>

<p>Entende a “gravidez”(:P) do problema? Agora, e se você colocar o ponto-e-virgula?</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export = service;(<span class="function"><span class="keyword">function</span><span class="params">( win, undefined )</span> </span>{</div><div class="line">  <span class="comment">// ...</span></div><div class="line">})( <span class="built_in">window</span> );</div></pre></td></tr></table></figure>

<p>Aí sim, tudo irá funcionar como o esperado! :D</p>
<h2 id="Parâmetros">Parâmetros</h2>
<p>Como qualquer função normal, você pode, ao invocar a <strong>IIFE</strong>, passar parâmetros para ela. O motivo de passar parâmetros é também escopo. Você pode passar um parâmetro que está no escopo global, para que ele seja usado como uma variável local. Um exemplo bastante comum é o jQuery:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( $ )</span> </span>{</div><div class="line">  <span class="comment">// ... Aqui, $ é local. :)</span></div><div class="line">})( jQuery );</div></pre></td></tr></table></figure>

<p>Assim você injeta como parâmetro o objeto global <code>jQuery</code>, e recebe na <strong>IIFE</strong> como <code>$</code>, localmente, que agora pode ser usado sem medo de conflitar com qualquer outra lib que utilizar <code>$</code>. xD</p>
<h2 id="O_undefined_na_IIFE">O undefined na IIFE</h2>
<p>Muitas pessoas não sabem, mas o <code>undefined</code> não é um operador, como o <code>new</code> ou o <code>void</code>, mas sim uma variável global, que tem valor indefinido (<code>undefined</code>).</p>
<p>Por esse motivo, no EcmaScript 3, era permitido mudar o valor de <code>undefined</code>.</p>
<p>O código abaixo era perfeitamente válido:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="literal">undefined</span> = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> a = <span class="literal">undefined</span>;</div><div class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// true</span></div></pre></td></tr></table></figure>

<p>Bizarro, não? Já na EcmaScript 5, com o <em>strict mode</em> ativado, (<code>&quot;use strict&quot;</code>), esse problema é resolvido, e <code>undefined</code> se torna imutável. Maaaas, como nem todo código usa o <code>&quot;use strict&quot;</code>, e você nunca sabe se alguém pode ter mexido no valor de <code>undefined</code>, nós passamos na <strong>IIFE</strong> o parâmetro <code>undefined</code> sem referenciar objeto algum. Logo, o seu valor, localmente - dentro da <strong>IIFE</strong> - será <code>undefined</code>!</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="literal">undefined</span> = <span class="literal">true</span>;</div><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( win, undefined )</span> </span>{</div><div class="line">  <span class="keyword">var</span> a = <span class="literal">undefined</span>;</div><div class="line">  <span class="built_in">console</span>.log( a ); <span class="comment">// undefined</span></div><div class="line">})( <span class="built_in">window</span> );</div><div class="line">  </div><div class="line"><span class="keyword">var</span> b = <span class="literal">undefined</span>;</div><div class="line"><span class="built_in">console</span>.log( b ); <span class="comment">// true</span></div></pre></td></tr></table></figure>

<p>Compreendeu o problema? Usando a <strong>IIFE</strong>, você está sempre seguro desse valor :D</p>
<p>Era isso que eu queria mostrar hoje, espero que o assunto tenha ficado claro! :)</p>
<p>Se não ficou, poste nos comentários! :)</p>
<p>Até o próximo :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/iife.png" alt=""></p>
<p>Quando uma <em>função imediata</em> é invocada, muita coisa pode estar acontecendo por trás dessa chamada. Quer descobrir o que é? Então me acompanhe na leitura :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="functional programming" scheme="http://blog.da2k.com.br/tags/functional-programming/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Acabando com milhões de contas no Gmail]]></title>
    <link href="http://blog.da2k.com.br/2015/02/19/acabando-com-milhoes-de-contas-no-gmail/"/>
    <id>http://blog.da2k.com.br/2015/02/19/acabando-com-milhoes-de-contas-no-gmail/</id>
    <published>2015-02-19T02:00:00.000Z</published>
    <updated>2015-02-19T09:17:31.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/gmail.png" alt=""></p>
<p>Cada vez que você cria uma conta em um serviço novo, você cria também um e-mail novo para não correr perigo de receber SPAM na sua conta principal? Pois saiba que, se você usa <strong>Gmail</strong>, você tem uma solução melhor pra isso! Vem comigo! ;)</p>
<a id="more"></a>

<p>O <strong>Gmail</strong> tem um sistema de segurança que não deixa outras pessoas criarem e-mails parecidos com o seu, - usando pontos - pois isso poderia ser usado para qualquer fim, e o seu nome seria usado sem permissão.</p>
<p>Por exemplo: se o seu e-mail é: <code>fulaninho.da.silva@gmail.com</code>, ninguém poderá cadastrar e-mails como:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fulaninhodasilva@gmail.com</div><div class="line">fulaninho.dasilva@gmail.com</div><div class="line">fulaninho.d.a.s.i.l.v.a@gmail.com</div></pre></td></tr></table></figure>

<p>Todas as combinações acima são válidas, e serão enviadas para o seu e-mail de cadastro. O <strong>Gmail</strong> cria <em>aliases</em> com pontos, para facilitar a entrega dos e-mails :)</p>
<div class="ads-da2k"><a href="http://www.eventick.com.br/curso-javascript-ninja" target="_blank"><img src="https://cloud.githubusercontent.com/assets/487669/6239059/58b94ab0-b6e7-11e4-8e5d-a5f2740870fd.png" alt="CURSO NINJA JAVASCRIPT - INSCREVA-SE JÁ!"></a></div>

<h2 id="O_sinal_de_+">O sinal de <code>+</code></h2>
<p>Uma outra forma de se aproveitar dos <em>alias</em>, é o sinal de <code>+</code>. Ao invés de criar várias contas diferentes para cada serviço que vocẽ se cadastra, você pode se fazer como abaixo (imagine um cadastro no Facebook):</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fulaninho.da.silva+facebook@gmail.com</div></pre></td></tr></table></figure>

<p>Após adicionar o sinal de <code>+</code>, você pode colocar qualquer sequência de caracteres (letras ou números), que o e-mail ainda será enviado para <code>fulaninho.da.silva@gmail.com</code>. Legal não? :D</p>
<p>Fazendo isso, você pode, por exemplo, usar os <a href="https://support.google.com/mail/answer/6579?hl=pt-BR" target="_blank" rel="external">filtros</a> para marcar os e-mails que chegarem para esse endereço com a label <code>FACEBOOK</code>. Ou talvez ignorar a caixa de entrada. Dá até pra saber quem está repassando seu e-mail para terceiros com isso! Se chegar um e-mail do Hotel Urbano com o <code>+facebook</code> no final, já sabe quem culpar :P</p>
<p>Coisa de louco, né? xD</p>
<p>Sei que a dica é bastante antiga, mas conversei com bastante gente que ainda não conhecia, por isso resolvi fazer o post :)</p>
<p>E você? Conhece alguma outra maracutaia que dá pra fazer com outro cliente de e-mail? Ou com o Gmail mesmo xD<br>Compartilhe conosco :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/gmail.png" alt=""></p>
<p>Cada vez que você cria uma conta em um serviço novo, você cria também um e-mail novo para não correr perigo de receber SPAM na sua conta principal? Pois saiba que, se você usa <strong>Gmail</strong>, você tem uma solução melhor pra isso! Vem comigo! ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="tips" scheme="http://blog.da2k.com.br/tags/tips/"/>
    
  </entry>
  
</feed>
